/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmMain.java
 *
 * Created on 08.feb.2014, 11:27:57
 */
package GUI;

import Classes.Host;
import Classes.Preferences;
import Classes.Species;
import Classes.SpeciesCollection;
import Classes.Validation;
import Classes.ValidationCollection;
import classes.LCATaxNodeCollection;
import classes.TaxNodesWrapper;
import java.awt.PopupMenu;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import javax.swing.ComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author ralfne
 */
public class frmMain extends javax.swing.JFrame {
    public final static String NEWLINE=System.getProperty("line.separator");
    public final static String FILE_SEPARATOR=System.getProperty("file.separator");
    
    private static frmMain m_Me=null;
    
    private Connection m_Connection=null;
    private TaxNodesWrapper m_TaxNodes=null;
    private ValidationCollection m_Validations=null;
    private Thread m_AsyncThread=null;
    
    /** Creates new form frmMain */
    public frmMain() {
        initComponents();
        m_Me=this;
        init();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        btnDatabaseConnection = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtSpeciesName = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstSpecies = new javax.swing.JList();
        jButton4 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAddSpecies_TaxID = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        txtImportFileanme = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        cmbValidation = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Status:");

        btnDatabaseConnection.setText("Preferences...");
        btnDatabaseConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatabaseConnectionActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton3.setText("Search");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        lstSpecies.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstSpecies.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSpeciesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstSpecies);

        jButton4.setText("Display species");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel4.setText("Find species in NCBI taxonomy:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtSpeciesName, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSpeciesName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel3.setText("Add species for a taxonomic group:");

        jLabel2.setText("TaxID of group:");

        txtAddSpecies_TaxID.setText("422676");

        jButton5.setText("OK");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAddSpecies_TaxID, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jLabel3))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtAddSpecies_TaxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton8.setText("Display taxonomy...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("Search for species...");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Get Genbank hosts...");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton1.setText("Infer host taxIDs...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setText("Import parasites manually:");

        jButton9.setText("Import");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton2.setText("Browse...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Validation:");

        cmbValidation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Format:    <TaxID>\\t<Name>\\t<Comment>\\t<Referenes>(\\t<Host1;Host2;>)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbValidation, 0, 642, Short.MAX_VALUE)
                    .addComponent(txtImportFileanme, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtImportFileanme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbValidation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(jLabel7))
                .addContainerGap())
        );

        jButton10.setText("Create sequence db...");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Reports...");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnDatabaseConnection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDatabaseConnection)
                    .addComponent(jButton8)
                    .addComponent(jButton6)
                    .addComponent(jButton7)
                    .addComponent(jButton1)
                    .addComponent(jButton10)
                    .addComponent(jButton11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDatabaseConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatabaseConnectionActionPerformed
        frmPreferences frm=new frmPreferences();
        frm.setVisible(true);
    }//GEN-LAST:event_btnDatabaseConnectionActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            String target=txtSpeciesName.getText().toUpperCase();
            final ArrayList<String> names=new ArrayList<String>();
            
            Iterator<Integer> iter=getTaxNodes().getNames().keySet().iterator();
            while(iter.hasNext()){
                int key=iter.next();
                String name=getTaxNodes().getNames().get(key);
                if(name.toUpperCase().startsWith(target)){
                    names.add(name);
                }
            }
            lstSpecies.setModel(new javax.swing.AbstractListModel() {
                ArrayList<String> strings = names;
                public int getSize() { return strings.size(); }
                public Object getElementAt(int i) { return strings.get(i); }
            });
            
        }catch(Exception ex){
            displayException(ex);
        }  
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void lstSpeciesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstSpeciesValueChanged
        String sel=(String)lstSpecies.getSelectedValue();
        txtSpeciesName.setText(sel);
    }//GEN-LAST:event_lstSpeciesValueChanged

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
            String taxName=txtSpeciesName.getText();
            Species thisSpecies=new Species();
            if(getTaxNodes().getNames().containsValue(taxName)){
                thisSpecies.loadFromName(taxName, getDBConnection());
                if(thisSpecies.getID()<=0){
                    Object[] o=getTaxNodes().getNames().keySet().toArray();
                    for(int i=0;i<o.length;i++){
                        Integer taxID=(Integer)o[i];
                        if(getTaxNodes().getName(taxID).equals(thisSpecies.getName())){
                            thisSpecies.setTaxID(taxID);
                            break;
                        }
                    }
                }
                frmSpecies frm=new frmSpecies(thisSpecies);
                frm.setVisible(true);                    
            }else{
                throw new Exception("Name not found in NCBI taxonomy");
            }
        }catch(Exception ex){
            displayException(ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        AsyncThreadObject_AddSpecies asyncObj=new AsyncThreadObject_AddSpecies();
        m_AsyncThread=new Thread(asyncObj);
        m_AsyncThread.start();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        frmNCBIHosts frm=new frmNCBIHosts();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        frmTaxonomy frm=new frmTaxonomy();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        frmSpeciesSearch frm=new frmSpeciesSearch();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        frmInferHostTaxIDs frm=new frmInferHostTaxIDs();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String f=getFilename("Import filename");
        txtImportFileanme.setText(f);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        AsyncThreadObject_ImportSpecies asyncImport=new AsyncThreadObject_ImportSpecies();
        m_AsyncThread=new Thread(asyncImport);
        m_AsyncThread.start();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        //frmSequenceDB frm=new frmSequenceDB();
        frmExportSequences frm=new frmExportSequences();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        frmReports frm=new frmReports();
        frm.setVisible(true);
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatabaseConnection;
    private javax.swing.JComboBox cmbValidation;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstSpecies;
    private javax.swing.JTextField txtAddSpecies_TaxID;
    private javax.swing.JTextField txtImportFileanme;
    private javax.swing.JTextField txtSpeciesName;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    
    private void initValidationCombo(){
        ComboBoxModel m=new ValidationComboBoxModel();
        cmbValidation.setModel(m);
    }

    
    public String getFilename(String title){
        JFileChooser fc=new JFileChooser();
        fc.setDialogTitle(title);
        int res=fc.showOpenDialog(null);
        String fName="";
        if(res==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            fName=f.getPath();
        }
        return fName;
    }
    
    public String getDirectoryName(String title){
        JFileChooser fc=new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle(title);
        int res=fc.showOpenDialog(null);
        String fName="";
        if(res==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            fName=f.getPath();
        }
        return fName;
    }

    public void setStartupPositionToMiddleOfScreen(javax.swing.JFrame form){
        java.awt.Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int w = form.getSize().width;
        int h = form.getSize().height;
        int x = (dim.width-w)/2;
        int y = (dim.height-h)/2;
        form.setLocation(x, y);
    }

    public void displayException(Exception ex){
        String s=ex.toString() + " - ";
        s+=ex.getMessage();
        
        JOptionPane.showMessageDialog
                (null, "<html><body><p style='width: 800px;'>" + s + 
                "</body></html>", "Error",JOptionPane.ERROR_MESSAGE);
        
    }
    
    public static frmMain getfrmMain(){
        return m_Me;
    }
    
    public TaxNodesWrapper getTaxNodes()throws Exception{
        if(m_TaxNodes==null){
            loadTaxonomy();
//            System.out.print("children;" + String.valueOf(m_TaxNodes.getChildren(9605).size()));
        }
        return m_TaxNodes;
    }

    private void init(){
        try{
            //test();
            frmSplashForm frm=new frmSplashForm();
            setStartupPositionToMiddleOfScreen(frm);
            frm.initTaxonomy();
            getValidations();
            initValidationCombo();
        }catch(Exception ex){
            displayException(ex);
            txtStatus.setText("Errors occured while initializing!");
        }
    }
    
    private void test(){
        TaxNodesWrapper tnw=new TaxNodesWrapper();
        tnw.initDEBUG();
        ArrayList<Integer> subset=new ArrayList<Integer>();
        subset.add(4);subset.add(5);subset.add(6);
        TaxNodesWrapper tnw2=tnw.getRepresentedSubset(subset);
        LCATaxNodeCollection lcas=tnw.getLCATaxNodes();
        lcas=tnw2.getLCATaxNodes();
    }

    private void loadTaxonomy()throws Exception{
        Preferences p=Preferences.instantiate();
        m_TaxNodes=new TaxNodesWrapper();
        String taxPath=p.getTaxonomyFilename();
        m_TaxNodes=new TaxNodesWrapper();  
        System.out.println("instantiating taxonomy..."); 
        byte[] bytes=m_TaxNodes.instantiate(taxPath);
        m_TaxNodes.instantiateNodes(bytes);
        m_TaxNodes.initSortedTaxNames();
        txtStatus.setText("Taxonomy loaded.");
    }
    
    public Connection getDBConnection()throws Exception{
        if(m_Connection==null){
            Preferences p=Preferences.instantiate();
            Class.forName(p.getDbDriver()).newInstance();
            m_Connection=DriverManager.getConnection(p.getDbUrl() + p.getDbName(), p.getDbUserName(), p.getDbPassword());
        }
        return m_Connection;
    }
    
    public ValidationCollection getValidations(){
        try{
            if(m_Validations==null){
                m_Validations=new ValidationCollection();
                m_Validations.load(getDBConnection());
            }            
        }catch(Exception ex){
            displayException(ex);
        }
        return m_Validations;
    }

    public static Date getStringAsDate(String s)throws Exception{
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
        Date d=sdf.parse(s);
        return d;
    }

    public static String getDateAsString(Date d){
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("dd.MM.yyyy HH:mm:ss");
        String s = sdf.format(d);
        return s;
    }

    public class AsyncThreadObject_LoadTaxonomy implements Runnable{
        public void run(){
            try{
                frmSplashForm frm=new frmSplashForm();
                frm.setVisible(true);
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
           }
        }
    }

    public class AsyncThreadObject_AddSpecies implements Runnable{
        public void run(){
            try{
                
                txtStatus.setText("Adding species...");
                int taxID=Integer.parseInt(txtAddSpecies_TaxID.getText());
                ArrayList<Integer> leafNodes=getTaxNodes().getChildrenLeafNodes(taxID,true);
                Iterator<Integer> iter=leafNodes.iterator();
                String max=String.valueOf(leafNodes.size());
                int counter=0;
                while(iter.hasNext()){
                    Integer leafTaxID=iter.next();
                    String name=getTaxNodes().getName(leafTaxID);
                    Species species=new Species();
                    species.setTaxID(leafTaxID);
                    species.setName(name);
                    counter++;
                    if(counter==190){
                        String ssd="";
                    }
                    txtStatus.setText("Saving " + String.valueOf(counter) + " of " + max);
                    saveSpecies(species);
                }
                txtStatus.setText("Done!");
            }catch(com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException intEx){
                //do nothing, this species already did exist in the db (skipped)
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        
        private void saveSpecies(Species s) throws Exception{
            try{
                s.save(getDBConnection());
            }catch(com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException intEx){
                //do nothing, this species already did exist in the db (skipped)
            }
        }
    }
    
    public class AsyncThreadObject_ImportSpecies implements Runnable{
        public void run(){
            try{
                txtStatus.setText("Importing...");
                readFile(txtImportFileanme.getText());    
                txtStatus.setText("Done!");
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }
        
        private void readFile(String filename)throws Exception{
            SpeciesCollection speciesCol=new SpeciesCollection();
            BufferedReader br=new BufferedReader(new FileReader(filename));
            String line="";
            while((line=br.readLine())!=null){
                String s=line.trim();
                if(!s.isEmpty()){
                    Species spec=createSpecies(s);
                    speciesCol.addSpecies(spec);

                }
            }
            Iterator<Integer> iter=speciesCol.keySet().iterator();
            while(iter.hasNext()){
                Integer taxID=iter.next();
                Species s=speciesCol.get(taxID);
                s.save(frmMain.getfrmMain().getDBConnection());
                Iterator<Host> iterH=s.getHosts().iterator();
                while(iterH.hasNext()){
                    Host h=iterH.next();
                    h.save(frmMain.getfrmMain().getDBConnection());
                }
            }
            
        }
        
        private Species createSpecies(String s){
            Species species=new Species();
            String [] values=s.split("\t");
            
            species.setName(values[0]);
            
            Integer i=Integer.parseInt(values[1]);
            species.setTaxID(i);

            species.setComment(values[2]);
            species.setReferences(values[3]);
                        
            if(values.length==5){
                String[] hosts=values[4].split(";");
                for(int hIndex=0;hIndex<hosts.length;hIndex++){
                    String curatedHostName=hosts[hIndex].trim();
                    if(curatedHostName.endsWith(",")){
                        curatedHostName=curatedHostName.substring(0,curatedHostName.length()-1);
                    }
                    Host h=species.getHosts().createHost(curatedHostName);
                    species.getHosts().addHost(h);
                }
            }
            
            Validation v=(Validation)cmbValidation.getSelectedItem();
            species.setValidation(v); 
            species.setParasiteType(Species.ParasiteType.Parasite);
            return species;
        }
    }
    

    public final class TextTransfer implements ClipboardOwner {
        @Override public void lostOwnership(Clipboard aClipboard, Transferable aContents){
            //do nothing
        }
        public void setClipboardContents(String aString){
            StringSelection stringSelection = new StringSelection(aString);
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            clipboard.setContents(stringSelection, this);
        }

         public String getClipboardContents() {
        String result = "";
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //odd: the Object param of getContents is not currently used
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText =
          (contents != null) &&
          contents.isDataFlavorSupported(DataFlavor.stringFlavor)
        ;
        if (hasTransferableText) {
          try {
            result = (String)contents.getTransferData(DataFlavor.stringFlavor);
          }
          catch (Exception ex){
            System.out.println(ex);
            ex.printStackTrace();
          }
        }
        return result;
      }
    } 
    
}


//get pubmed id for gi number:
//http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id=21614549&strand=1&seq_start=1&seq_stop=100&rettype=native&retmode=xml
//(search for pubmed in xml)