/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmNCBIHosts.java
 *
 * Created on 09.feb.2014, 15:39:28
 */
package GUI;

import Classes.GenBankRecDownloader;
import Classes.GiNumber;
import Classes.GiNumberDownloader;
import Classes.Host;
import Classes.Species;
import Classes.SpeciesCollection;
import java.util.ArrayList;
import java.util.Iterator;

/**
 *
 * @author ralfne
 */
public class frmNCBIHosts extends javax.swing.JFrame {
    private Thread m_AsyncThread=null;
    
    /** Creates new form frmNCBIHosts */
    public frmNCBIHosts() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtProgress = new javax.swing.JTextField();
        btnOK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtRetmax = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Progress:");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel2.setText("Max number of genbank records retrieved pr species:");

        txtRetmax.setText("100");

        jLabel3.setText("Retrieve hosts for all species without host information");

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("(IsParasite=NULL & ValidationID=NULL)");

        jLabel5.setText("Species with ParasiteType!=Unknown & ValidationID!=NULL will not be affected");

        jLabel6.setText("These values will be set after downloading all genbank records");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProgress, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRetmax, javax.swing.GroupLayout.DEFAULT_SIZE, 126, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(btnOK)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtRetmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton2)
                    .addComponent(btnOK))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(28, 28, 28)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        AsyncObj obj=new AsyncObj();
        m_AsyncThread=new Thread(obj);
        m_AsyncThread.start();
    }//GEN-LAST:event_btnOKActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        m_AsyncThread.stop();
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmNCBIHosts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmNCBIHosts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmNCBIHosts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmNCBIHosts.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmNCBIHosts().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtProgress;
    private javax.swing.JTextField txtRetmax;
    // End of variables declaration//GEN-END:variables

    private class AsyncObj implements Runnable{
        public void run(){
            try{
                btnOK.setEnabled(false);
                int counter=0;
                int retMax=Integer.parseInt(txtRetmax.getText());
                SpeciesCollection speciesCol=new SpeciesCollection();
                speciesCol.loadSpeciesWithoutHostInformation(frmMain.getfrmMain().getDBConnection());
                String max=String.valueOf(speciesCol.size());
                Iterator<Integer> iter=speciesCol.keySet().iterator();
                while(iter.hasNext()){
                    Integer key=iter.next();
                    Species s=speciesCol.get(key);
                    counter++;
                    String message="Getting hosts for " + s.getName();
                    txtProgress.setText(message);
                    //Deleting Gi numbers and hosts; i.e starting "fresh" for each species
                    s.deleteGiNumbersAndHosts(frmMain.getfrmMain().getDBConnection());
                    getGiNumbers(s, retMax);
                    message+=" - " + String.valueOf(s.getGiNumbers().size()) + " gi numbers.";
                    message+=" (" + String.valueOf(counter) + " of " + max + ")";
                    txtProgress.setText(message);
                    getHostInformation(s);
                    s.updateStatus(frmMain.getfrmMain().getDBConnection(), frmMain.getfrmMain().getValidations().getDefault());
                }
                txtProgress.setText("Done!");
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }
        
        private void getGiNumbers(Species s, int retmax)throws Exception{
            GiNumberDownloader genbankD=new GiNumberDownloader();
            ArrayList<String> giNumbersS=genbankD.getGiNumbers(s.getTaxID(), retmax);
            s.getGiNumbers().importFromStrings(giNumbersS);
            s.getGiNumbers().save(frmMain.getfrmMain().getDBConnection());
        }
        
        private void getHostInformation(Species s){ 
            GenBankRecDownloader genbankD=new GenBankRecDownloader();
            Iterator<GiNumber> iter=s.getGiNumbers().iterator();
            while(iter.hasNext()){
                GiNumber giNumber=iter.next();
                try{
                    String hostText=genbankD.getHost(giNumber.getValue());
                    if(!hostText.isEmpty()){
                        //A host field is present in genbank record!
                        Host theHost=s.getHosts().createHost(hostText);
                        if(s.getHosts().containsRawText(theHost.getRawText())){
                            //this host has already been added from another gi number; remember to update ythis gi 
                            //we set newHost to the existing host, so that we can update later on...
                            theHost=s.getHosts().getByRawText(theHost.getRawText());
                        }else{
                            // this host does not exist; add it and save it
                            s.getHosts().addHost(theHost);
                            theHost.save(frmMain.getfrmMain().getDBConnection());
                        }
                        giNumber.setHost(theHost);
                        giNumber.saveHostID(frmMain.getfrmMain().getDBConnection());                        
                    }
                }catch(Exception ex){
                    frmMain.getfrmMain().displayException(ex);
                }
            }

        }
    }
}
