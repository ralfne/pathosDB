/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmInferHostTaxIDs.java
 *
 * Created on 12.feb.2014, 18:41:34
 */
package GUI;

import Classes.Host;
import Classes.HostCollection;
import Classes.Preferences;
import Classes.TextCount;
import Classes.TextCountCollection;
import classes.TaxNodesWrapper;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author ralfne
 */
public class frmInferHostTaxIDs extends javax.swing.JFrame {
    private Thread m_TaxThread=null;
    public enum TaxInfererMode {FromSpeciesName,Manually, RemoveTaxIDs}
    
    /** Creates new form frmInferHostTaxIDs */
    public frmInferHostTaxIDs() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtRegEx = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        txtRegExTest = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtRegExTestOut = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        chkCaseSensitive = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtManualSQLSearchTerms = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtManualTaxIDs = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jButton6 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Infer taxIDs from host text:");

        jLabel4.setText("Regex for extracting host name:");

        jLabel5.setText("(leave blank for default behaviour)");

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("Test against:");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel9.setText("Example:   .*\\[(.*)]$   for extracting ");

        txtRegExTestOut.setColumns(20);
        txtRegExTestOut.setRows(5);
        jScrollPane2.setViewportView(txtRegExTestOut);

        jLabel10.setText(">some desc [Homo sapiens]");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel4)))
                            .addGap(26, 26, 26))
                        .addComponent(jLabel5))
                    .addComponent(jLabel9)
                    .addComponent(jLabel10))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addComponent(txtRegEx, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRegExTest, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegEx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5)
                        .addComponent(txtRegExTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Set taxID manually for host text:");

        jLabel6.setText("SQL search term matching host text:");

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Assigned taxID:");

        chkCaseSensitive.setText("Case-sensitive");

        txtManualSQLSearchTerms.setColumns(20);
        txtManualSQLSearchTerms.setRows(5);
        jScrollPane3.setViewportView(txtManualSQLSearchTerms);

        txtManualTaxIDs.setColumns(20);
        txtManualTaxIDs.setRows(5);
        jScrollPane4.setViewportView(txtManualTaxIDs);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel6))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkCaseSensitive))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                    .addComponent(jButton3))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCaseSensitive)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        jButton4.setText("Close");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText("Output:");

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton6.setText("Display hosts without TaxIDs");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton1.setText("Delete all host TaxIDs");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addComponent(jButton6)
                            .addComponent(jButton4)))
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton4, jButton6});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4))
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            TaxInferer taxInferer=new TaxInferer();
            taxInferer.init(TaxInfererMode.FromSpeciesName,null,null);
            m_TaxThread=new Thread(taxInferer);
            m_TaxThread.start();                
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            TaxInferer taxInferer=new TaxInferer();
            String [] namesS=txtManualSQLSearchTerms.getText().split("\n");
            String [] idsS=txtManualTaxIDs.getText().split("\n");
            ArrayList<String> taxNames=new ArrayList<String>();
            ArrayList<Integer> taxIDs=new ArrayList<Integer>();
            for(int i=0;i<namesS.length;i++){
                taxNames.add(namesS[i].trim());
                Integer tmp=Integer.parseInt(idsS[i].trim());
                taxIDs.add(tmp);
            }
            taxInferer.init(TaxInfererMode.Manually, taxNames, taxIDs);
            m_TaxThread=new Thread(taxInferer);
            m_TaxThread.start();                
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            TaxInferer taxInferer=new TaxInferer();
            taxInferer.init(TaxInfererMode.RemoveTaxIDs, null, null);
            m_TaxThread=new Thread(taxInferer);
            m_TaxThread.start();                
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            Pattern p = Pattern.compile(txtRegEx.getText());
            Matcher m = p.matcher(txtRegExTest.getText());
            if (m.matches()) {
                txtRegExTestOut.setText("Match!");
                txtRegExTestOut.append(frmMain.NEWLINE);
                String t=m.group(0);
                txtRegExTestOut.append(t);
                txtRegExTestOut.append(frmMain.NEWLINE);
                txtRegExTestOut.append(frmMain.NEWLINE);
                txtRegExTestOut.append("Matching sub-sequences:");
                for(int i=0;i<m.groupCount();i++){
                    t=m.group(i+1);
                    txtRegExTestOut.append(frmMain.NEWLINE);
                    txtRegExTestOut.append(t);
                }
            }else{
                txtRegExTestOut.setText("No matches...");
            }  
        }catch(Exception ex){
            txtRegExTestOut.setText("Error:");
            txtRegExTestOut.append(frmMain.NEWLINE);
            txtRegExTestOut.append(ex.getMessage());
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
            initHostsWithoutTaxID();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmInferHostTaxIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmInferHostTaxIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmInferHostTaxIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmInferHostTaxIDs.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmInferHostTaxIDs().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkCaseSensitive;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextArea txtManualSQLSearchTerms;
    private javax.swing.JTextArea txtManualTaxIDs;
    private javax.swing.JTextField txtRegEx;
    private javax.swing.JTextField txtRegExTest;
    private javax.swing.JTextArea txtRegExTestOut;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables


    private void initHostsWithoutTaxID()throws Exception{
        StringBuilder sb=new StringBuilder();
        Preferences p=Preferences.instantiate();
        HostCollection hosts=new HostCollection(null);
        hosts.loadForTaxInference(p.getHostSpeciesInferenceLimit(), frmMain.getfrmMain().getDBConnection());
        Iterator<Host> iter=hosts.iterator();
//        txtHostsWithoutTaxID.setText("");
        TextCountCollection tcc=new TextCountCollection();
        while(iter.hasNext()){
            Host h=iter.next();
            tcc.addText(h.getRawText());
        }
        tcc.sort();
        Iterator<TextCount> iterTC=tcc.iterator();
        while(iterTC.hasNext()){
            TextCount tc=iterTC.next();
            String s=tc.getText() + " (" + String.valueOf(tc.getCount()) + ")";
            sb.append(s).append(frmMain.NEWLINE);
//            txtHostsWithoutTaxID.append(s);
//            txtHostsWithoutTaxID.append(frmMain.NEWLINE);
        }
        frmText frm=new frmText();
        frm.init("Hosts without TaxIDs:", sb.toString());
        frm.setVisible(true);
    }
    
    public class TaxInferer implements Runnable {
        private TaxNodesWrapper m_Taxonomy=null;
        private TaxInfererMode m_TaxInfererMode= TaxInfererMode.FromSpeciesName;
        ArrayList<Integer> m_ManualTaxIDs=null;
        ArrayList<String> m_ManualTaxNames=null;
        ArrayList<String> m_ManualTaxNames_Failed=new ArrayList<String>();
        
        public void init(TaxInfererMode mode, ArrayList<String> manualTaxNames, ArrayList<Integer> manualTaxIDs){
            m_TaxInfererMode=mode;
            m_ManualTaxIDs=manualTaxIDs;
            m_ManualTaxNames=manualTaxNames;
        }
        
        public void run(){
            try{
                m_Taxonomy=frmMain.getfrmMain().getTaxNodes();
                if(m_TaxInfererMode==TaxInfererMode.FromSpeciesName){
                    inferTaxIDsFromHostNames();
                }else if(m_TaxInfererMode==TaxInfererMode.Manually){
                    inferTaxIDsManually();
                }else if(m_TaxInfererMode==TaxInfererMode.RemoveTaxIDs){
                    removeTaxIDs();
                }
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }        
        
        private void inferTaxIDsFromHostNames()throws Exception{
            Preferences p=Preferences.instantiate();
            int counter=0;
            txtStatus.setText("Initializing...");
            TaxNodesWrapper tnw=frmMain.getfrmMain().getTaxNodes();
            tnw.initTaxNameLookupTable();
            HostCollection hosts=new HostCollection(null);
            hosts.loadForTaxInference
                    (p.getHostSpeciesInferenceLimit(), frmMain.getfrmMain().getDBConnection());
            
            String total=String.valueOf(hosts.size());
            txtStatus.setText(total + " hosts without TaxIDs found.");
            Iterator<Host>iter=hosts.iterator();
            int countNoTaxIDs=0;
            int rootTaxID=TaxNodesWrapper.getRootTaxID();
           
            String regEx="";
            if(!txtRegEx.getText().isEmpty())regEx=txtRegEx.getText();
           
            while(iter.hasNext()){
                Host h=iter.next();
                counter++;
                txtLog.setText("Inferring taxonomy ids (" + String.valueOf(counter) + " of " + total + ")...");
                int taxID=tnw.inferTaxID(h.getRawText(), regEx);
                if(taxID==-1){
                    countNoTaxIDs++;
                }else{
                    h.setTaxID(taxID);
                    h.updateTaxID(frmMain.getfrmMain().getDBConnection());
                }                        
            }
            txtStatus.setText("Done!");
            txtLog.append(frmMain.NEWLINE);
            if(countNoTaxIDs>0){                
                txtLog.setText("Could not infer tax IDs for " +String.valueOf(countNoTaxIDs) + " hosts.");
                txtLog.append(frmMain.NEWLINE);
                txtLog.append("These hosts remain without taxIDs -");
                txtLog.append(frmMain.NEWLINE);
                txtLog.append("they can be inferred with other methods later on.");
                txtLog.append(frmMain.NEWLINE);

            }
        }
        
        private void inferTaxIDsManually()throws Exception{
            txtStatus.setText("Setting taxIDs manually..,");
            m_ManualTaxNames_Failed=new ArrayList<String>();
            int counter=0;
            boolean caseSensitive=chkCaseSensitive.isSelected();
            for(int i=0;i<m_ManualTaxNames.size();i++){
                String taxName=m_ManualTaxNames.get(i);
                Integer taxID=m_ManualTaxIDs.get(i);
                if(m_Taxonomy.isValidTaxID(taxID)){
                    HostCollection hosts=new HostCollection(null);
                    hosts.updateTaxIDForRawTextLKE (taxName, taxID, 
                        caseSensitive, frmMain.getfrmMain().getDBConnection());
                }else{
                    m_ManualTaxNames_Failed.add(String.valueOf(taxID) + " (" + taxName + ")");
                }
            }
            displayFailedManualTaxIDs();
            txtStatus.setText("Done!");
        }
        
        private void displayFailedManualTaxIDs(){
            txtLog.setText("");
            if(!m_ManualTaxNames_Failed.isEmpty()){
                txtLog.append("Setting the following taxids failed, as they are not valid taxIDs." 
                        + frmMain.NEWLINE);
                txtLog.append("(Possibly they are new taxIDS, added to NCBI after the creation of this database.)" 
                        + frmMain.NEWLINE);
                Iterator<String> iter=m_ManualTaxNames_Failed.iterator();
                while(iter.hasNext()){
                    String s=iter.next();
                    txtLog.append(s + frmMain.NEWLINE);
                }
            }
        }
        
        private void removeTaxIDs(){
            txtStatus.setText("Setting taxIDs manually..,");
            
            txtStatus.setText("Done!");
        }
        
    }
}
