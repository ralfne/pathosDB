/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmMain.java
 *
 * Created on 30.okt.2012, 15:29:37
 */
package GUI;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ralfne
 */
public class frmMainOLD extends javax.swing.JFrame {
    public final static String NEWLINE=System.getProperty("line.separator");
    public final static String PATH_SEPARATOR=System.getProperty("file.separator");

    private Thread m_ExtracThread=null;
    private ExtractionThread m_Exctractor=null;
    
    /** Creates new form frmMain */
    public frmMainOLD() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtParasiteDBFile = new javax.swing.JTextField();
        btnParasiteDBFileBrowse = new javax.swing.JButton();
        txtSilvaSSUFIle = new javax.swing.JTextField();
        btnSilvaFileBrowse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtOutFIle = new javax.swing.JTextField();
        btnOutFileBrowse = new javax.swing.JButton();
        btnExtract = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        chkTesting = new javax.swing.JCheckBox();
        chkInclSilvaHeader = new javax.swing.JCheckBox();
        chkInclCustomHeader = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        txtExcludes = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Parasite db file:");

        txtParasiteDBFile.setText("C:\\MERG\\Apps\\ParasiteDBParser\\parasiteDB_30_10_2012.txt");

        btnParasiteDBFileBrowse.setText("Browse...");
        btnParasiteDBFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnParasiteDBFileBrowseActionPerformed(evt);
            }
        });

        txtSilvaSSUFIle.setText("F:\\Downloads\\SSURef_111_tax_silva_trunc.fasta\\SSURef_111_tax_silva_trunc.fasta\\SSURef_111_tax_silva_trunc.fasta");

        btnSilvaFileBrowse.setText("Browse...");
        btnSilvaFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSilvaFileBrowseActionPerformed(evt);
            }
        });

        jLabel2.setText("Silva SSU file:");

        jLabel3.setText("Output file:");

        txtOutFIle.setText("C:\\tmp\\parasiteout.txt");

        btnOutFileBrowse.setText("Browse...");
        btnOutFileBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOutFileBrowseActionPerformed(evt);
            }
        });

        btnExtract.setText("Extract");
        btnExtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExtractActionPerformed(evt);
            }
        });

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        jLabel4.setText("Log:");

        chkTesting.setText("100000 lines only");

        chkInclSilvaHeader.setText("Incl Silva header");

        chkInclCustomHeader.setText("Incl custom header");

        jLabel5.setText("Excludes:");

        txtExcludes.setText("Metazoa;Bacteria;archaeplastida;archaea;fungi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(chkInclSilvaHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(chkInclCustomHeader)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(btnExtract)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkTesting))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtExcludes, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                    .addComponent(txtSilvaSSUFIle, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                    .addComponent(txtParasiteDBFile, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
                                    .addComponent(txtOutFIle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnParasiteDBFileBrowse)
                                    .addComponent(btnSilvaFileBrowse)
                                    .addComponent(btnOutFileBrowse))))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtParasiteDBFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnParasiteDBFileBrowse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSilvaSSUFIle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSilvaFileBrowse)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtExcludes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOutFileBrowse)
                    .addComponent(jLabel3)
                    .addComponent(txtOutFIle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(chkTesting)
                                .addComponent(btnExtract))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkInclSilvaHeader)
                            .addComponent(chkInclCustomHeader))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnParasiteDBFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnParasiteDBFileBrowseActionPerformed
        txtParasiteDBFile.setText(getFilenameName(""));
    }//GEN-LAST:event_btnParasiteDBFileBrowseActionPerformed

    private void btnSilvaFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSilvaFileBrowseActionPerformed
        txtSilvaSSUFIle.setText(getFilenameName(""));
    }//GEN-LAST:event_btnSilvaFileBrowseActionPerformed

    private void btnOutFileBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOutFileBrowseActionPerformed
        txtOutFIle.setText(getFilenameName(""));
    }//GEN-LAST:event_btnOutFileBrowseActionPerformed

    private void btnExtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExtractActionPerformed
        m_Exctractor=new ExtractionThread();
        m_ExtracThread=new Thread(m_Exctractor);
        m_ExtracThread.start();
    }//GEN-LAST:event_btnExtractActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmMainOLD().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExtract;
    private javax.swing.JButton btnOutFileBrowse;
    private javax.swing.JButton btnParasiteDBFileBrowse;
    private javax.swing.JButton btnSilvaFileBrowse;
    private javax.swing.JCheckBox chkInclCustomHeader;
    private javax.swing.JCheckBox chkInclSilvaHeader;
    private javax.swing.JCheckBox chkTesting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtExcludes;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtOutFIle;
    private javax.swing.JTextField txtParasiteDBFile;
    private javax.swing.JTextField txtSilvaSSUFIle;
    // End of variables declaration//GEN-END:variables

    public String getFilenameName(String title){
        JFileChooser fc=new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle(title);
        int res=fc.showOpenDialog(null);
        String fName="";
        if(res==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            fName=f.getPath();
        }
        return fName;
    }
    
    private class ExtractionThread implements Runnable{
        private ArrayList<ParasiteDBEntry> m_ParasiteDBEntries=null;
        private ArrayList<String> m_OutFileContent=null;
        
        public void run(){
            try{
                m_OutFileContent=new ArrayList<String>();
                
                ArrayList<String> excludes=getExcludes();
                
                txtLog.append("Opening parasite DB..." + NEWLINE);
                loadParasiteDB(txtParasiteDBFile.getText());
                txtLog.append("Done!" + NEWLINE);
                
                parseSSUFastaFile(txtSilvaSSUFIle.getText(), excludes);
                txtLog.append("Writing outfile..." + NEWLINE);
                writeOutFile();
                txtLog.append("Done!" + NEWLINE);
                
                txtLog.setText("Organisms that were not found:" + NEWLINE);
                
                Iterator<ParasiteDBEntry> it=m_ParasiteDBEntries.iterator();
                while(it.hasNext()){
                    ParasiteDBEntry entry=it.next();
                    if(entry.notFound){
                        txtLog.append(entry.OrgName + NEWLINE);
                    }
                }
                
            }catch(Throwable ex){
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
        
        private ArrayList<String> getExcludes(){
            String [] vals=txtExcludes.getText().split(";");
            ArrayList<String> excludes=new ArrayList<String>();
            for (String s : vals){
                excludes.add(s.toUpperCase());
            }
            return excludes;
        }
        
        private void loadParasiteDB(String filename)throws Exception{
            BufferedReader br=new BufferedReader(new FileReader(filename));
            String line="";
            m_ParasiteDBEntries=new ArrayList<ParasiteDBEntry>();
            while((line=br.readLine())!=null){
                if(!line.trim().equals("")){
                    String [] vals=line.split("\t");
                    ParasiteDBEntry entry=new ParasiteDBEntry();
                    entry.OrgName=vals[0];
                    entry.Comments=line.trim();//line.replace(vals[0], "").trim();
                    int i=entry.OrgName.indexOf("[porgn:");
                    entry.OrgName=entry.OrgName.substring(0,i).trim();
                    m_ParasiteDBEntries.add(entry);
                }
            }
        }

        private void parseSSUFastaFile(String filename, ArrayList<String> excludes)throws Exception{
            BufferedReader br=new BufferedReader(new FileReader(filename));
            String line="";
            String thisHeader="";
            String seq="";
            int count=0;
            while((line=br.readLine())!=null){
                String header="";
                if(line.startsWith(">")){
                    if(thisHeader.equals("")){
                        thisHeader=line;
                    }
                    count++;
                    if(!seq.equals("")){
                        if(!excludeSequence(thisHeader, excludes)){
                            ProcessParasiteDBEntries(thisHeader, seq);
                        }
                        thisHeader=line;
                        seq="";
                        txtLog.setText("Sequence number " + String.valueOf(count));
                        if(chkTesting.isSelected()){
                            if(count>100000)return;                            
                        }
                    }
                }else{
                    seq+=line.trim() + NEWLINE;
                }
            }
            
        }
        
        private boolean excludeSequence(String header, ArrayList<String> excludes){
            String headerU=header.toUpperCase();
            for(String exc : excludes){
                if(headerU.contains(exc)){
                    return true;
                }
            }
            return false;
        }
        
        private void ProcessParasiteDBEntries(String fastaHeader, String seq){
            Iterator<ParasiteDBEntry> it=m_ParasiteDBEntries.iterator();
            while(it.hasNext()){
                ParasiteDBEntry entry=it.next();
                if(ProcessParasiteDBEntry(entry, fastaHeader, seq)){
                    return;
                }
            }
        }
        
        private boolean ProcessParasiteDBEntry(ParasiteDBEntry entry, String fastaHeader, String seq){
            boolean res=false;
            String header=fastaHeader.toUpperCase();
            String org=entry.OrgName.toUpperCase();
//            String accession=fastaHeader.split("\t")[0];
            if(header.contains(org)){
                String finalHeader="";
                if(chkInclSilvaHeader.isSelected()){
                    finalHeader=fastaHeader;
                }
                if(chkInclCustomHeader.isSelected()){
                    if(!finalHeader.equals("")){
                        finalHeader+="\t";
                    }
                    finalHeader+= entry.Comments;
                }
                finalHeader+=NEWLINE;
//                m_OutFileContent.add(fastaHeader + "\t" + entry.Comments + NEWLINE);
                m_OutFileContent.add(finalHeader);
                m_OutFileContent.add(seq + NEWLINE);
                res=true;
                entry.notFound=false;
            }
            return res;
        }
        
        private void writeOutFile()throws Exception{
            BufferedWriter bw=new BufferedWriter(new FileWriter(txtOutFIle.getText()));
            Iterator<String> it=m_OutFileContent.iterator();
            while(it.hasNext()){
                String line=it.next();
                bw.write(line);
            }
            bw.flush();
            bw.close();
        }
        
        private class ParasiteDBEntry{
            public String OrgName="";
            public String Comments="";
            public boolean notFound=true;
        }

    }
}
