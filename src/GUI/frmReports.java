/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmReports.java
 *
 * Created on 16.feb.2015, 18:58:00
 */
package GUI;

import Classes.Host;
import Classes.HostCollection;
import Classes.Species;
import Classes.SpeciesCollection;
import classes.TaxNodesWrapper;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author ralfne
 */
public class frmReports extends javax.swing.JFrame {
    private Thread m_Asyn_Thread=null;
    
    /** Creates new form frmReports */
    public frmReports() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        btnCreateReport = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtHostTaxID = new javax.swing.JTextField();
        chkSymbionts = new javax.swing.JCheckBox();
        chkParasites = new javax.swing.JCheckBox();
        chkHostAssociated = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        cmbDiversityType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        txtParasitesTaxID = new javax.swing.JTextField();
        cmbHostRestriction = new javax.swing.JComboBox();
        cmbParasiteRestriction = new javax.swing.JComboBox();
        chkPrintNumbers = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        txtReportName = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtReport = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        btnCancelReport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCreateReport.setText("Create report");
        btnCreateReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateReportActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Diversity report");

        txtHostTaxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHostTaxIDActionPerformed(evt);
            }
        });

        chkSymbionts.setText("Symbionts");

        chkParasites.setSelected(true);
        chkParasites.setText("Parasites");

        chkHostAssociated.setText("Host-associated");

        jLabel3.setText("Calculate report for:");

        cmbDiversityType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Host diversity", "Parasite diversity" }));

        jLabel5.setText("Calculate:");

        txtParasitesTaxID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtParasitesTaxIDActionPerformed(evt);
            }
        });

        cmbHostRestriction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All hosts", "Restrict hosts to clade:", "Exclude hosts from clade:" }));

        cmbParasiteRestriction.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All parasite", "Restrict parasite to clade:", "Exclude parasite from clade:" }));

        chkPrintNumbers.setText("Print number of hosts/parasites");

        jLabel6.setText("Report name:");

        jLabel7.setText("(Separate by '+' )");

        jLabel8.setText("(Separate by '+' )");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(cmbDiversityType, 0, 120, Short.MAX_VALUE))
                            .addComponent(cmbParasiteRestriction, javax.swing.GroupLayout.Alignment.LEADING, 0, 186, Short.MAX_VALUE)
                            .addComponent(cmbHostRestriction, javax.swing.GroupLayout.Alignment.LEADING, 0, 186, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtReportName, javax.swing.GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(chkPrintNumbers))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                                .addComponent(chkParasites)
                                .addGap(18, 18, 18)
                                .addComponent(chkSymbionts)
                                .addGap(18, 18, 18)
                                .addComponent(chkHostAssociated)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(btnCreateReport))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtParasitesTaxID, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                                    .addComponent(txtHostTaxID, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtReportName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkPrintNumbers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHostRestriction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHostTaxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbParasiteRestriction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtParasitesTaxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateReport)
                    .addComponent(jLabel5)
                    .addComponent(cmbDiversityType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(chkParasites)
                    .addComponent(chkSymbionts)
                    .addComponent(chkHostAssociated))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtReport.setColumns(20);
        txtReport.setRows(5);
        jScrollPane1.setViewportView(txtReport);

        jLabel2.setText("Status:");

        btnCancelReport.setText("Cancel");
        btnCancelReport.setEnabled(false);
        btnCancelReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 767, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 657, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancelReport)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancelReport))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHostTaxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHostTaxIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHostTaxIDActionPerformed

    private void btnCreateReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateReportActionPerformed
        try{
            btnCreateReport.setEnabled(false);
            btnCancelReport.setEnabled(true);
            createDiversityReport();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_btnCreateReportActionPerformed

    private void txtParasitesTaxIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtParasitesTaxIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtParasitesTaxIDActionPerformed

    private void btnCancelReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelReportActionPerformed
        m_Asyn_Thread.stop();
        btnCreateReport.setEnabled(true);
        btnCancelReport.setEnabled(false);
    }//GEN-LAST:event_btnCancelReportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmReports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmReports().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelReport;
    private javax.swing.JButton btnCreateReport;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkHostAssociated;
    private javax.swing.JCheckBox chkParasites;
    private javax.swing.JCheckBox chkPrintNumbers;
    private javax.swing.JCheckBox chkSymbionts;
    private javax.swing.JComboBox cmbDiversityType;
    private javax.swing.JComboBox cmbHostRestriction;
    private javax.swing.JComboBox cmbParasiteRestriction;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtHostTaxID;
    private javax.swing.JTextField txtParasitesTaxID;
    private javax.swing.JTextArea txtReport;
    private javax.swing.JTextField txtReportName;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    private void createDiversityReport()throws Exception{
        ReportGenerator rp=new ReportGenerator();
        if(cmbDiversityType.getSelectedIndex()==0){
            rp.init(true, chkPrintNumbers.isSelected(), txtReportName.getText());
        }else{
            rp.init(false, chkPrintNumbers.isSelected(), txtReportName.getText());
        }
        m_Asyn_Thread=new Thread(rp);
        m_Asyn_Thread.start();
    }
    
    
    private class NumberItemCollection extends ArrayList<NumberItem> {
        
        public void init(HashMap<Integer, NumberItem> items){
            Iterator<Integer> iter=items.keySet().iterator();
            while(iter.hasNext()){
                Integer i=iter.next();
                NumberItem ni=items.get(i);
                this.add(ni);
            }
            sort();
        }
        
        public void init(SpeciesCollection species, ArrayList<Integer> hostsSubset){
            String message=" of " + String.valueOf(species.size());
            int counter=0;
            Iterator<Integer> iter=species.keySet().iterator();
            while(iter.hasNext()){
                counter++;
                txtStatus.setText(String.valueOf(counter) + message);
                Integer taxID=iter.next();
                Species s=species.get(taxID);
                NumberItem ni=new NumberItem();
                ni.Name=s.getName();
                ni.Number=getValidHostsNo(s.getHosts(), hostsSubset);
                //ni.Number=s.getHosts().size();
                this.add(ni);
            }
            txtStatus.setText("Sorting report...");
            sort();
        }
        
        private int getValidHostsNo(HostCollection hosts, ArrayList<Integer> hostsSubset){
            if(cmbHostRestriction.getSelectedIndex()==0){ return hosts.size(); }
            int out=0;
            Iterator<Host> iter=hosts.iterator();
            while(iter.hasNext()){
                Host h=iter.next();
                switch(cmbHostRestriction.getSelectedIndex()){
                    case 1:
                        if(hostsSubset.contains(h.getTaxID())){
                            out++;
                        }
                        break;
                    case 2:
                        if(!hostsSubset.contains(h.getTaxID())){
                            out++;
                        }
                        break;
                }
            }
            return out;
        }
        
        public void sort(){
            Collections.sort(this);
        }
        
    }
    
    private class NumberItem implements Comparable<NumberItem> {
        public String Name="";
        public Integer Number=-1;
        public int compareTo(NumberItem item){
            return item.Number.compareTo(this.Number);
        }
    }
    
    private class ReportGenerator implements Runnable{
        private boolean m_HostDivReport=false;
        private boolean m_PrintNumbers=false;
        private TaxNodesWrapper m_Taxonomy=null;
        private String m_ReportName="";
        
        public void init(boolean hostDivReport, boolean  printNumbers, String name)throws Exception{
            m_HostDivReport=hostDivReport;
            m_PrintNumbers=printNumbers;
            m_Taxonomy=frmMain.getfrmMain().getTaxNodes();
            m_ReportName=name;
        }
        
        public void run(){
            try{
                if(m_HostDivReport){
                    createHostDiversityReport();
                }else{
                    createParasiteDiversityReport();
                }
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }

        private ArrayList<Integer> getRestrictionTaxIDs(boolean hosts){
            ArrayList<Integer> subset=null;
            if(hosts){
                if(cmbHostRestriction.getSelectedIndex()!=0){
                    subset=new ArrayList<Integer>();
                    String [] taxIDs=txtHostTaxID.getText().split("\\+");
                    addChildTaxIDs(taxIDs, subset);
                }
            }else{
                if(cmbParasiteRestriction.getSelectedIndex()!=0){
                    subset=new ArrayList<Integer>();
                    String [] taxIDs=txtParasitesTaxID.getText().split("\\+");
                    addChildTaxIDs(taxIDs, subset);
                }
            }
            return subset;
        }
        
        private void addChildTaxIDs(String[] taxa, ArrayList<Integer> taxIDs){
            for(String taxID_S:taxa){
                Integer taxID=Integer.parseInt(taxID_S.trim());
                ArrayList<Integer> tmp=m_Taxonomy.getChildrenRecursive(taxID);
                taxIDs.addAll(tmp);
            }
        }
        
        private void createParasiteDiversityReport()throws Exception{
            txtStatus.setText("Initializing...");
            ArrayList<Integer> hostSubset=null;
            hostSubset=getRestrictionTaxIDs(true);

            ArrayList<Integer> parasiteSubset=null;
            parasiteSubset=getRestrictionTaxIDs(false);

            SpeciesCollection species=getSelectedSpecies();

            HashMap<Integer,NumberItem> items=new HashMap<Integer, NumberItem>();

            loadHosts(species);
            Iterator<Integer> iter=species.keySet().iterator();
            String message=" of " + String.valueOf(species.size());
            int counter=0;
            while(iter.hasNext()){
                counter++;
                txtStatus.setText(String.valueOf(counter) + message);
                Integer taxID=iter.next();
                Species s=species.get(taxID);

                switch (cmbParasiteRestriction.getSelectedIndex()){
                    case 0:
                        processHostsForSpecies(s, hostSubset, items);
                        break;
                    case 1:
                        if(parasiteSubset.contains(taxID)){ processHostsForSpecies(s, hostSubset, items); }
                        break;
                    case 2:
                        if(!parasiteSubset.contains(taxID)){ processHostsForSpecies(s, hostSubset, items); }
                        break;
                }            
            }
            txtStatus.setText("Sorting report...");
            NumberItemCollection itemsCol=new NumberItemCollection();
            itemsCol.init(items);
            printNumberItems(itemsCol, m_PrintNumbers);
            txtStatus.setText("Done!");
        }

        private void processHostsForSpecies(Species s, ArrayList<Integer> subset, HashMap<Integer,NumberItem> items){
            Iterator<Host>iter=s.getHosts().iterator();
            while(iter.hasNext()){
                Host h=iter.next();
                if(h.getTaxID()!=null){
                    switch (cmbHostRestriction.getSelectedIndex()){
                    case 0:
                        registerHostForSpecies(h, items);
                        break;
                    case 1:
                        if(subset.contains(h.getTaxID())){
                            registerHostForSpecies(h, items);
                        }
                        break;
                    case 2:
                        if(!subset.contains(h.getTaxID())){
                            registerHostForSpecies(h, items);
                        }
                        break;
                    }
                }
            }
        }

        private void registerHostForSpecies(Host h, HashMap<Integer,NumberItem> items){
            NumberItem ni=items.get(h.getTaxID());
            if(ni==null){
                ni=new NumberItem();
                ni.Name=m_Taxonomy.getName(h.getTaxID());
                ni.Number=0;
                items.put(h.getTaxID(), ni);
            }
            ni.Number++;
        }


        private void printNumberItems(NumberItemCollection items, boolean includeNumbers){
            if(!m_ReportName.isEmpty()){ txtReport.setText(m_ReportName + frmMain.NEWLINE); }
            Iterator<NumberItem>iter=items.iterator();
            while(iter.hasNext()){
                NumberItem ni=iter.next();
                if(ni.Number>0){
                    String s=ni.Name + frmMain.NEWLINE;
                    if(includeNumbers){
                        s=String.valueOf(ni.Number) + "\t" + s ;
                    }
                    txtReport.append(s);
                }
            }
        }

        private void createHostDiversityReport()throws Exception{
            txtStatus.setText("Initializing...");
            ArrayList<Integer> hostSubset=getRestrictionTaxIDs(true);
            ArrayList<Integer> parasiteSubset=getRestrictionTaxIDs(false);
            SpeciesCollection species=getSelectedSpecies();
            loadHosts(species);
            species=getSpeciesSubset(parasiteSubset, species);
            NumberItemCollection items=new NumberItemCollection();
            items.init(species, hostSubset);
            printNumberItems(items, m_PrintNumbers);
            txtStatus.setText("Done!");
        }

        private SpeciesCollection getSelectedSpecies()throws Exception{
            SpeciesCollection parasites=new SpeciesCollection();
            SpeciesCollection symbionts=new SpeciesCollection();
            SpeciesCollection hostAssociated=new SpeciesCollection();

            SpeciesCollection allSpecies=new SpeciesCollection();

            if(chkParasites.isSelected()){
                parasites.load("%", false, -1, null, null, Species.ParasiteType.Parasite, true, 
                    frmMain.getfrmMain().getDBConnection());
            }
            if(chkSymbionts.isSelected()){
                symbionts.load("%", false, -1, null, null, Species.ParasiteType.Symbiant, true, 
                    frmMain.getfrmMain().getDBConnection());
            }
            if(chkHostAssociated.isSelected()){
                hostAssociated.load("%", false, -1, null, null, Species.ParasiteType.HostAssociated, true, 
                    frmMain.getfrmMain().getDBConnection());
            }

            allSpecies.addSpeciesCollection(parasites);
            allSpecies.addSpeciesCollection(symbionts);
            allSpecies.addSpeciesCollection(hostAssociated);

            return allSpecies;

        }

        private SpeciesCollection getSpeciesSubset(ArrayList<Integer> parasiteSubset, SpeciesCollection species) throws Exception{
            TaxNodesWrapper tnw=frmMain.getfrmMain().getTaxNodes();
            SpeciesCollection subsetSpecies=new SpeciesCollection();
            Iterator<Integer> iter=species.keySet().iterator();
            while(iter.hasNext()){
                Integer taxID=iter.next();
                Species s=species.get(taxID);
                switch (cmbParasiteRestriction.getSelectedIndex()){
                    case 0:
                        subsetSpecies.addSpecies(s);
                        break;
                    case 1:
                        if(parasiteSubset.contains(s.getTaxID())){ subsetSpecies.addSpecies(s); }
                        break;
                    case 2:
                        if(!parasiteSubset.contains(s.getTaxID())){ subsetSpecies.addSpecies(s); }
                        break;
                }
            }
            return subsetSpecies;
        }

        private void loadHosts(SpeciesCollection species)throws Exception{
            Iterator<Integer> iter=species.keySet().iterator();
            while(iter.hasNext()){
                Integer taxID=iter.next();
                Species s=species.get(taxID);
                s.getHosts().loadForParasite(frmMain.getfrmMain().getDBConnection());
            }

        }

    }
}
