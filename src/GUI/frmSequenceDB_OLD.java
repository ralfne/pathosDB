/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmSequenceDB.java
 *
 * Created on 17.feb.2014, 14:29:23
 */
package GUI;

import Classes.GenBankRecDownloader;
import Classes.GiNumberDownloader;
import Classes.Species;
import Classes.SpeciesCollection;
import Classes.TaxNodeParasiteStatusCollection;
import classes.Sequence;
import classes.SequenceCollection;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.JOptionPane;

/**
 *
 * @author ralfne
 */
public class frmSequenceDB_OLD extends javax.swing.JFrame {
    private Thread m_AsyncThread=null;
    
    /** Creates new form frmSequenceDB */
    public frmSequenceDB_OLD() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlPR2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtFoldername = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        rbtnTaxName = new javax.swing.JRadioButton();
        rbtnAccession = new javax.swing.JRadioButton();
        rbtnBoth = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        chkParasitePercentage = new javax.swing.JCheckBox();
        txtParasitePercentage = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtRetMax1 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtAppendedQueryText = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtRetMax2 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtOutputFilename = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        txtLimitTaxID = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        txt18SGenbankFile = new javax.swing.JTextField();
        txt18SGenbankOutputFile = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        chkVerifySpeciesOnly = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        chkExportParasites = new javax.swing.JCheckBox();
        chkExportSymbionts = new javax.swing.JCheckBox();
        chkExportHostAssociated = new javax.swing.JCheckBox();
        chkExportFreeLiving = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        txtExportFilename = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlPR2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Create sequence db based on the PR2 database:");

        jLabel2.setText("PR2 folder:");

        jButton1.setText("Browse...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Create DB");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("(Download from: http://ssu-rrna.org/download_entire_database.html)");

        buttonGroup1.add(rbtnTaxName);
        rbtnTaxName.setText("Tax name");

        buttonGroup1.add(rbtnAccession);
        rbtnAccession.setSelected(true);
        rbtnAccession.setText("Accession No");

        buttonGroup1.add(rbtnBoth);
        rbtnBoth.setText("Both (one or the other)");

        jLabel6.setText("Identify seqs based on:");

        chkParasitePercentage.setText("Inc. species if containing tax group contains at least:");
        chkParasitePercentage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkParasitePercentageActionPerformed(evt);
            }
        });

        txtParasitePercentage.setText("0.5");
        txtParasitePercentage.setEnabled(false);

        jLabel7.setText("% parasites");

        javax.swing.GroupLayout pnlPR2Layout = new javax.swing.GroupLayout(pnlPR2);
        pnlPR2.setLayout(pnlPR2Layout);
        pnlPR2Layout.setHorizontalGroup(
            pnlPR2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPR2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPR2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(pnlPR2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(31, 31, 31)
                        .addComponent(txtFoldername, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(pnlPR2Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel4)
                        .addGap(151, 151, 151))
                    .addGroup(pnlPR2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnTaxName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnAccession)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rbtnBoth)
                        .addGap(18, 18, 18)
                        .addComponent(chkParasitePercentage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtParasitePercentage, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        pnlPR2Layout.setVerticalGroup(
            pnlPR2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPR2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPR2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFoldername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPR2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(rbtnTaxName)
                    .addComponent(rbtnAccession)
                    .addComponent(rbtnBoth)
                    .addComponent(chkParasitePercentage)
                    .addComponent(txtParasitePercentage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel5.setText("Status:");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel8.setText("Create sequence db based on NCBI Genbank:");

        jLabel9.setText("Get all sequences if less records than:");

        txtRetMax1.setText("10");

        jLabel10.setText("If more records are found, append the following query text:");

        txtAppendedQueryText.setText(" AND (rRNA[Title] OR SSU[Title])");
        txtAppendedQueryText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppendedQueryTextActionPerformed(evt);
            }
        });

        jLabel11.setText("Download equal or less records than:");

        txtRetMax2.setText("100");

        jButton4.setText("Create DB");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Reset export flags");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 550, Short.MAX_VALUE)
                        .addComponent(jButton6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(txtRetMax2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 547, Short.MAX_VALUE)
                                .addComponent(jButton4))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtRetMax1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAppendedQueryText, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtRetMax1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtAppendedQueryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(txtRetMax2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton5.setText("Close");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel12.setText("Sequence DB output location:");

        jLabel3.setText("Output filename:");

        txtOutputFilename.setText("C:\\tmp\\parasitedb\\parasiteDB_Genbank.fasta");

        jButton3.setText("Browse...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel13.setText("Limit sequences to species belonging to this tax group:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtLimitTaxID, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOutputFilename, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtOutputFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txtLimitTaxID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel14.setText("Create sequence db based on exported 18S NCBI Genbank records:");

        jLabel15.setText("18S genbank file:");

        jButton7.setText("Browse...");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel16.setText("Output file:");

        jButton8.setText("Browse...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Create DB");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        chkVerifySpeciesOnly.setText("verify species only");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt18SGenbankOutputFile, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE)
                                    .addComponent(txt18SGenbankFile, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addComponent(chkVerifySpeciesOnly))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(txt18SGenbankFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addGap(12, 12, 12)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(txt18SGenbankOutputFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton9)
                    .addComponent(chkVerifySpeciesOnly))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel17.setText("Export species names and taxIDs:");

        chkExportParasites.setText("Parasites");

        chkExportSymbionts.setText("Symbionts");

        chkExportHostAssociated.setText("Host-associated");

        chkExportFreeLiving.setText("Free-living");

        jLabel18.setText("Filename:");

        jButton11.setText("Browse...");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton10.setText("Export");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkExportParasites)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkExportSymbionts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkExportHostAssociated)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkExportFreeLiving))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtExportFilename, javax.swing.GroupLayout.PREFERRED_SIZE, 693, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addGap(18, 18, 18)
                        .addComponent(jButton10)))
                .addGap(200, 200, 200))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(chkExportParasites)
                    .addComponent(chkExportSymbionts)
                    .addComponent(chkExportHostAssociated)
                    .addComponent(chkExportFreeLiving))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(txtExportFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlPR2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStatus, javax.swing.GroupLayout.DEFAULT_SIZE, 840, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 944, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlPR2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String f=frmMain.getfrmMain().getDirectoryName("PR2 folder");
        txtFoldername.setText(f);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String f=frmMain.getfrmMain().getFilename("Output filename");
        txtOutputFilename.setText(f);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Async_CreateDBFromPR2 dbcreator=new Async_CreateDBFromPR2();
        m_AsyncThread=new Thread(dbcreator);
        m_AsyncThread.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chkParasitePercentageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkParasitePercentageActionPerformed
        txtParasitePercentage.setEnabled(chkParasitePercentage.isSelected());
    }//GEN-LAST:event_chkParasitePercentageActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if(m_AsyncThread!=null){
            m_AsyncThread.stop();
        }
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
            SpeciesCollection.resetIsExported(frmMain.getfrmMain().getDBConnection());
            txtStatus.setText("Export flags reset!");
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Async_CreateDBFromNCBI dbcreator=new Async_CreateDBFromNCBI();
        m_AsyncThread=new Thread(dbcreator);
        m_AsyncThread.start();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void txtAppendedQueryTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppendedQueryTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAppendedQueryTextActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        String f=frmMain.getfrmMain().getFilename("18S genbank file:");
        txt18SGenbankFile.setText(f);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String f=frmMain.getfrmMain().getFilename("Output file:");
        txt18SGenbankOutputFile.setText(f);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Genbank18SDB dbcreator=new Genbank18SDB();
        m_AsyncThread=new Thread(dbcreator);
        m_AsyncThread.start();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        try {
            String s=frmMain.getfrmMain().getFilename("Output file:");
            if(s!=null){
                txtExportFilename.setText(s);
            }
        } catch (Exception e) {
            frmMain.getfrmMain().displayException(e);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            export();
        } catch (Exception e) {
            frmMain.getfrmMain().displayException(e);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmSequenceDB_OLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmSequenceDB_OLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmSequenceDB_OLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmSequenceDB_OLD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmSequenceDB_OLD().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox chkExportFreeLiving;
    private javax.swing.JCheckBox chkExportHostAssociated;
    private javax.swing.JCheckBox chkExportParasites;
    private javax.swing.JCheckBox chkExportSymbionts;
    private javax.swing.JCheckBox chkParasitePercentage;
    private javax.swing.JCheckBox chkVerifySpeciesOnly;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel pnlPR2;
    private javax.swing.JRadioButton rbtnAccession;
    private javax.swing.JRadioButton rbtnBoth;
    private javax.swing.JRadioButton rbtnTaxName;
    private javax.swing.JTextField txt18SGenbankFile;
    private javax.swing.JTextField txt18SGenbankOutputFile;
    private javax.swing.JTextField txtAppendedQueryText;
    private javax.swing.JTextField txtExportFilename;
    private javax.swing.JTextField txtFoldername;
    private javax.swing.JTextField txtLimitTaxID;
    private javax.swing.JTextField txtOutputFilename;
    private javax.swing.JTextField txtParasitePercentage;
    private javax.swing.JTextField txtRetMax1;
    private javax.swing.JTextField txtRetMax2;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables

    
    public void export()throws Exception{
        //JOptionPane.showMessageDialog(null, "A");
        ArrayList<SpeciesCollection> exportSpecies=new ArrayList<SpeciesCollection>();
        SpeciesCollection species=new SpeciesCollection();
        exportSpecies.add(species);
        if(chkExportFreeLiving.isSelected()){
            species.load("%", false, null, null, null, Species.ParasiteType.NoParasite, true, frmMain.getfrmMain().getDBConnection());
        }
        species=new SpeciesCollection();
        exportSpecies.add(species);
        if(chkExportHostAssociated.isSelected()){
            species.load("%", false, null, null, null, Species.ParasiteType.HostAssociated, true, frmMain.getfrmMain().getDBConnection());
        }
        species=new SpeciesCollection();
        exportSpecies.add(species);
        if(chkExportParasites.isSelected()){
                    //JOptionPane.showMessageDialog(null, "B");
            species.load("%", false, null, null, null, Species.ParasiteType.Parasite, true, frmMain.getfrmMain().getDBConnection());
                    //JOptionPane.showMessageDialog(null, "C");
                      //      JOptionPane.showMessageDialog(null, String.valueOf(species.size()) );
        }
        species=new SpeciesCollection();
        exportSpecies.add(species);
        if(chkExportSymbionts.isSelected()){
            species.load("%", false, null, null, null, Species.ParasiteType.Symbiant, true, frmMain.getfrmMain().getDBConnection());
        }
        BufferedWriter bw=new BufferedWriter(new FileWriter(txtExportFilename.getText()));
        Iterator <SpeciesCollection> iter=exportSpecies.iterator();
        while(iter.hasNext()){
            SpeciesCollection thisSpecies=iter.next();
            thisSpecies.writeTaxIDAndSpeciesNames(bw);
        }
        bw.flush();
        bw.close();
        txtStatus.setText("Exporting species...Done!");
    }
    
    public class Async_CreateDBFromNCBI implements Runnable{
        
        public void run(){
            try{
                txtStatus.setText("Creating Genbank sequence DB");
                SpeciesCollection notExportedSpecies=new SpeciesCollection();
                notExportedSpecies.loadParasiteSpeciesWithoutExport(frmMain.getfrmMain().getDBConnection());
                
                if(!txtLimitTaxID.getText().isEmpty()){
                    Integer taxGroupID=Integer.parseInt(txtLimitTaxID.getText());
                    notExportedSpecies=notExportedSpecies.getFilterByTaxGroup
                            (taxGroupID, frmMain.getfrmMain().getTaxNodes());
                }
                
                Iterator<Integer> iter=notExportedSpecies.keySet().iterator();
                String max=String.valueOf(notExportedSpecies.size());
                int counter=0;
                while(iter.hasNext()){
                    Integer taxID=iter.next();
                    Species s=notExportedSpecies.get(taxID);
                    counter++;
                    String message="Getting fasta files for " + s.getName();
                    message+=" (" + String.valueOf(counter)+ " of " + max + ")";
                    txtStatus.setText(message);
                    getSequencesForSpecies(s, txtOutputFilename.getText());
                }
                ArrayList<Integer> giNumbers=new ArrayList<Integer>();
                txtStatus.setText("Done!");
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }
        
        private void getSequencesForSpecies(Species s, String filename)throws Exception{
            SequenceCollection seqs=new SequenceCollection("", "");
            int retmax=Integer.parseInt(txtRetMax1.getText());
            String taxIDString=GiNumberDownloader.getTaxIDQueryString(s.getTaxID());
            ArrayList<String> giNumbers=getGiNumbers(taxIDString, retmax);

            if(giNumbers.size()<retmax){
                seqs=getContigsForGiNumbers(giNumbers);
            }else{
                String query=txtAppendedQueryText.getText();
                query=query.replaceAll(" ", "%20");
                query=GiNumberDownloader.getTaxIDQueryString(s.getTaxID()) + query;
                retmax=Integer.parseInt(txtRetMax2.getText());
                giNumbers=getGiNumbers(query, retmax);
                seqs=getContigsForGiNumbers(giNumbers);                
            }
            
            seqs.appendHeaderAndSequences(filename);
            s.updateIsExported(true, frmMain.getfrmMain().getDBConnection());
            
        }
        
        private SequenceCollection getContigsForGiNumbers(ArrayList<String> giNumbers)throws Exception{
            SequenceCollection seqs=new SequenceCollection("", "");
            Iterator<String> iter=giNumbers.iterator();
            while(iter.hasNext()){
                String giN=iter.next();
                String fa=getFASTArecord(giN);
                Sequence c=createContig(fa);
                if(!seqs.containsKey(c.getHeader()))seqs.addSequence(c);
            }
            return seqs;
        }
        
        private Sequence createContig(String fastaFile){
            String[] s=fastaFile.split("[\\r\\n]+");
            Sequence c=new Sequence(s[0]);
            StringBuilder sb=new StringBuilder();
            for(int i=1;i<s.length;i++){
                sb.append(s[i]);
            }
            c.setSequence(sb.toString());
            return c;
        }
        
        private ArrayList<String> getGiNumbers(String query, int retmax)throws Exception{
            ArrayList<String> giNumbers=new ArrayList<String>();
            GiNumberDownloader downloader=new GiNumberDownloader();
            giNumbers=downloader.getGiNumbers(query, retmax);
            return giNumbers;
        }
        
        private String getFASTArecord(String giNumber)throws Exception{
            GenBankRecDownloader downloader=new GenBankRecDownloader();
            String fa=downloader.getFASTArecord(giNumber);
            return fa;
        }
        
    }
    
    public class Async_CreateDBFromPR2 implements Runnable{
        private SpeciesCollection m_MyParasites=null;
        private SpeciesCollection m_MyNonParasites=null;
        TaxNodeParasiteStatusCollection m_StatusCol=null;
        private SequenceCollection m_MySequenceDB=null;
        private double m_PercentageCutoff=0;
        public void run(){
            try{
                
                txtStatus.setText("Creating PR2 sequence db...");
                m_MySequenceDB=new SequenceCollection("","");
                
                m_MyParasites=new SpeciesCollection();
                m_MyParasites.load("%", false, null, null, null, Species.ParasiteType.Parasite, true, frmMain.getfrmMain().getDBConnection());
                txtStatus.setText(txtStatus.getText() + String.valueOf(m_MyParasites.size()) + " parasites loaded...");
                
                if(!txtLimitTaxID.getText().isEmpty()){
                    Integer taxGroupID=Integer.parseInt(txtLimitTaxID.getText());
                    try{
                        m_MyParasites=m_MyParasites.getFilterByTaxGroup
                                (taxGroupID, frmMain.getfrmMain().getTaxNodes());                        
                    }catch(Exception ex){
                        JOptionPane.showMessageDialog(null, "Impossible error...");
                        frmMain.getfrmMain().displayException(ex);
                    }
                    txtStatus.setText("Parasites filtered for taxID " + String.valueOf(taxGroupID));
                }
                
                if(chkParasitePercentage.isSelected()){
                    m_MyNonParasites=new SpeciesCollection();
                    m_MyNonParasites.load("%", false, null, null, null, Species.ParasiteType.Unknown, true,
                            frmMain.getfrmMain().getDBConnection());
                    m_StatusCol=new TaxNodeParasiteStatusCollection();
                    frmMain.getfrmMain().getTaxNodes().initTaxIDs();
                    m_StatusCol.init(m_MyParasites, m_MyNonParasites, frmMain.getfrmMain().getTaxNodes());                    
                    m_PercentageCutoff=Double.parseDouble(txtParasitePercentage.getText());
                }
                
                ArrayList<File> files=getDBFiles(txtFoldername.getText());
                Iterator<File> iter=files.iterator();
                while(iter.hasNext()){
                    File f=iter.next();
                    parsePR2dbFile(f);
                }
                txtStatus.setText("Saving sequence db...");
                m_MySequenceDB.writeHeaderAndSequences(txtOutputFilename.getText());
                txtStatus.setText("Done!");
            }catch(Exception ex){
                frmMain.getfrmMain().displayException(ex);
            }
        }
        
        
        private ArrayList<File> getDBFiles(String folder)throws Exception{
            ArrayList<File> files=new ArrayList<File>();
            File dir=new File(folder);
            for (File f:dir.listFiles()){
                if(f.isFile()){
                    files.add(f);
                }
            }
            return files;
        }
        
        private void parsePR2dbFile(File pr2FIle)throws Exception{
            int counter=0;
            SequenceCollection contigs=new SequenceCollection("", "");
            contigs.load(pr2FIle.getPath());
            String max=String.valueOf(contigs.size());
            Iterator<String> iter=contigs.keySet().iterator();
            while(iter.hasNext()){
                String key=iter.next();
                Sequence c=contigs.get(key);
                               
                counter++;
                
                boolean added=false;
                String message="Parsing PR2 file " + pr2FIle.getName();
                message+=" (" +String.valueOf(counter) + " of " + max + ")";
                txtStatus.setText(message);
                if(rbtnTaxName.isSelected()){
                    Integer taxID=getParasiteTaxIDByTaxName(c.getHeader());
                    if(taxID!=null){
                        m_MySequenceDB.addSequence(c);
                        added=true;
                    }                    
                }else if(rbtnAccession.isSelected()){
                    Integer taxID=getParasiteTaxIDByAccessionNo(c.getHeader());
                    if(taxID!=null){
                        m_MySequenceDB.addSequence(c);
                        added=true;
                    }
                }else if(rbtnBoth.isSelected()){
                    Integer taxID=getParasiteTaxIDByTaxName(c.getHeader()); 
                    if(taxID!=null){
                        m_MySequenceDB.addSequence(c);
                        added=true;
                    }else{
                        taxID=getParasiteTaxIDByAccessionNo(c.getHeader());
                        if(taxID!=null){
                            m_MySequenceDB.addSequence(c);
                            added=true;
                        }
                    }
                }
                if(!added){
                    if(chkParasitePercentage.isSelected()){
                        if(isExtendedParasite(c.getHeader()))m_MySequenceDB.addSequence(c);
                    }
                }
            }
        }
        
        private boolean isExtendedParasite(String header){
            boolean res=false;
            if(rbtnTaxName.isSelected()){
                String taxName=getTaxName(header);
                res=m_StatusCol.isExtendedParasite(taxName, m_PercentageCutoff);
            }else if(rbtnAccession.isSelected()){
                
            }
            return res;
        }
        
        private String getAccessionNo(String header)throws Exception{
            String [] residues=header.split("\\|");
            String accNo=residues[0];
            residues=accNo.split("\\.");
            accNo=residues[0];
            accNo=accNo.substring(1);
            return accNo;
        }
        private Integer getParasiteTaxIDByAccessionNo(String header)throws Exception{
            String accNo=getAccessionNo(header);
            GenBankRecDownloader downloader=new GenBankRecDownloader();
            String orgName=downloader.getOrganism(accNo);
            Integer taxID=getParasiteTaxID(orgName);
            return taxID;
        }
        private String getTaxName(String header){
            String [] residues=header.split("\\|");
            String pr2Name=residues[residues.length-1];
            pr2Name=pr2Name.replace("+", " ");
            return pr2Name;
        }
        private Integer getParasiteTaxIDByTaxName(String header){
            String pr2Name=getTaxName(header);
            Integer taxID=getParasiteTaxID(pr2Name);
            return taxID;
        }
        
        private Integer getParasiteTaxID(String name){
            name=name.toUpperCase();
            Iterator<Integer> iter=m_MyParasites.keySet().iterator();
            while(iter.hasNext()){
                Integer taxID=iter.next();
                Species s=m_MyParasites.get(taxID);
                if(name.equals(s.getName().toUpperCase())){
                    return s.getTaxID();
                }
            }
            return null;
            
        }
    }
    
    private class Genbank18SDB implements Runnable{
        private SpeciesCollection m_MyParasites=null;
        private HashMap<String,Species> m_ParasiteNames=null;
        private ArrayList<String> m_AbsentSpecies=null;
        
        public void run(){
            try {
                m_AbsentSpecies=new ArrayList<String>();
                m_MyParasites=new SpeciesCollection();
                m_MyParasites.load("%", false, null, null, null, Species.ParasiteType.Parasite, true, frmMain.getfrmMain().getDBConnection());
                m_ParasiteNames=m_MyParasites.getForSpeciesNames();
                txtStatus.setText(txtStatus.getText() + String.valueOf(m_MyParasites.size()) + " parasites loaded...");
        
                if(chkVerifySpeciesOnly.isSelected()){
                    readGenbank18SSpeciesFile(txt18SGenbankFile.getText());
                }else{
                    read18SFile(txt18SGenbankFile.getText(), txt18SGenbankOutputFile.getText());
                }
                reportExportSuccess();
                
            } catch (Exception e) {
                txtStatus.setText("Error:" + e.getMessage());
            }
        }
        
        
        private void readGenbank18SSpeciesFile(String filename)throws Exception{
            BufferedReader br=new BufferedReader(new FileReader(filename));
            String line="";
            while((line=br.readLine())!=null){
                Species sp=m_ParasiteNames.get(line);
                if(sp!=null){
                    sp.setExported(true);
                }
            }
        }
        
        private void read18SFile(String filename, String outFile)throws Exception{
            BufferedReader br=new BufferedReader(new FileReader(filename));
            BufferedWriter bw=new BufferedWriter(new FileWriter(outFile));
            try {
                int counter=0;
                int steps=0;
                String line="";
                ArrayList<String> rec=new ArrayList<String>();
                boolean first=true;
                while((line=br.readLine())!=null){
                    rec.add(line);
                    if(line.startsWith(">")){
                        if(first){
                            first=false;
                        }else{
                            counter++;
                            steps++;
                            if(steps>1000){
                                txtStatus.setText("Parsing fasta records:" + String.valueOf(counter));
                                steps=0;
                            }

                            Sequence seq=new Sequence("");
                            seq.readFastaRecord(rec);
                            process18SRecord(seq, bw);
                            String tmp=rec.get(rec.size()-1);
                            rec=new ArrayList<String>();
                            rec.add(tmp);
                        }
                    }
                }
                Sequence seq=new Sequence("");
                seq.readFastaRecord(rec);
                process18SRecord(seq, bw);
            } catch (Exception e) {
                throw e;
            } finally{
                br.close();
                bw.flush();
                bw.close();
            }
        }
        
        private void process18SRecord(Sequence seq, BufferedWriter bw)throws Exception{
            String[] parts=seq.getHeader().split("\\|");
            String speciesS=parts[1];
            Species species=m_ParasiteNames.get(speciesS);
            if(species==null){
                //m_AbsentSpecies.add(speciesS);
            }else{
                species.setExported(true);
                seq.writeHeaderAndSequence(bw);
            }
        }
        
        private void reportExportSuccess(){
            int counter=0;
            StringBuilder sb=new StringBuilder();
            Iterator<String> iter=m_ParasiteNames.keySet().iterator();
            while(iter.hasNext()){
                String key=iter.next();
                Species sp=m_ParasiteNames.get(key);
                if(!sp.getExported()){
                    counter++;
                    sb.append(sp.getName()).append("|");
                }
            }
            txtStatus.setText("Species not found in the 18S file:" + 
                    String.valueOf(counter) + " of " + String.valueOf(m_ParasiteNames.size()) + 
                    " - names:" + sb.toString());
        }
        
        
    }
    

}

