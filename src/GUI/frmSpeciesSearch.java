/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmSpeciesSearch.java
 *
 * Created on 11.feb.2014, 11:49:16
 */
package GUI;

import Classes.Species;
import Classes.SpeciesCollection;
import Classes.Validation;
import java.util.Date;
import javax.swing.ComboBoxModel;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author ralfne
 */
public class frmSpeciesSearch extends javax.swing.JFrame {
    private SpeciesCollection m_SpeciesCol=new SpeciesCollection();
    
    /** Creates new form frmSpeciesSearch */
    public frmSpeciesSearch() {
        initComponents();
        initValidationCombo();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblValidation = new javax.swing.JLabel();
        cmbValidation = new javax.swing.JComboBox();
        chkUseValidation = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        txtNameLIKE = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chkCreationDate = new javax.swing.JCheckBox();
        txtDateFrom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDateTo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        chkParasiteType = new javax.swing.JCheckBox();
        cmbParasiteType = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSpecies = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblValidation.setText("Validation:");

        cmbValidation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbValidation.setEnabled(false);

        chkUseValidation.setText("Specify validation method");
        chkUseValidation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUseValidationActionPerformed(evt);
            }
        });

        jLabel1.setText("Name LIKE:");

        txtNameLIKE.setText("%");
        txtNameLIKE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameLIKEActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Search for species:");

        chkCreationDate.setText("Specify creation date:");
        chkCreationDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCreationDateActionPerformed(evt);
            }
        });

        txtDateFrom.setText("dd.MM.yyyy HH:mm:ss");
        txtDateFrom.setEnabled(false);

        jLabel3.setText("Between");

        txtDateTo.setText("dd.MM.yyyy HH:mm:ss");
        txtDateTo.setEnabled(false);

        jLabel4.setText("and");

        chkParasiteType.setText("Specify parasite status:");
        chkParasiteType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkParasiteTypeActionPerformed(evt);
            }
        });

        cmbParasiteType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Unknown", "Free living", "Symbiant", "Host-associated", "Parasite" }));
        cmbParasiteType.setEnabled(false);

        jButton5.setText("Get species");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNameLIKE, javax.swing.GroupLayout.DEFAULT_SIZE, 557, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(chkUseValidation)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblValidation)
                                        .addGap(18, 18, 18)
                                        .addComponent(cmbValidation, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(chkCreationDate)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel3))
                                            .addComponent(chkParasiteType))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(txtDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel4)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(cmbParasiteType, 0, 329, Short.MAX_VALUE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                                .addComponent(jButton5))))
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtDateFrom, txtDateTo});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNameLIKE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkUseValidation)
                    .addComponent(lblValidation)
                    .addComponent(cmbValidation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCreationDate)
                    .addComponent(jLabel3)
                    .addComponent(txtDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkParasiteType)
                    .addComponent(cmbParasiteType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        tblSpecies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tblSpecies.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSpeciesMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblSpecies);

        jButton3.setText("Close");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 648, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkUseValidationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUseValidationActionPerformed
        if(chkUseValidation.isSelected()){
            cmbValidation.setEnabled(true);
            cmbValidation.setEnabled(true);
        }else{
            cmbValidation.setEnabled(false);
            cmbValidation.setEnabled(false);            
        }
    }//GEN-LAST:event_chkUseValidationActionPerformed

    private void tblSpeciesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSpeciesMouseReleased
        try{
            int rowIndex=tblSpecies.getSelectedRow();
            Object o=tblSpecies.getModel().getValueAt(rowIndex,0);
            Integer taxid=(Integer)o;
            Species s=m_SpeciesCol.get(taxid);
            frmSpecies frm=new frmSpecies(s);
            frm.setVisible(true);   
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_tblSpeciesMouseReleased

    private void txtNameLIKEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameLIKEActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameLIKEActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void chkCreationDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCreationDateActionPerformed
        txtDateFrom.setEnabled(chkCreationDate.isSelected());
        txtDateTo.setEnabled(chkCreationDate.isSelected());
    }//GEN-LAST:event_chkCreationDateActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            loadSpecies();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void chkParasiteTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkParasiteTypeActionPerformed
        cmbParasiteType.setEnabled(chkParasiteType.isSelected());
    }//GEN-LAST:event_chkParasiteTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmSpeciesSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmSpeciesSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmSpeciesSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmSpeciesSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmSpeciesSearch().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkCreationDate;
    private javax.swing.JCheckBox chkParasiteType;
    private javax.swing.JCheckBox chkUseValidation;
    private javax.swing.JComboBox cmbParasiteType;
    private javax.swing.JComboBox cmbValidation;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblValidation;
    private javax.swing.JTable tblSpecies;
    private javax.swing.JTextField txtDateFrom;
    private javax.swing.JTextField txtDateTo;
    private javax.swing.JTextField txtNameLIKE;
    // End of variables declaration//GEN-END:variables

    private void initValidationCombo(){
        ComboBoxModel m=new ValidationComboBoxModel();
        cmbValidation.setModel(m);
    }

    private void loadSpecies()throws Exception{
        m_SpeciesCol=new SpeciesCollection();
        Integer valID=1;
        boolean useVal=chkUseValidation.isSelected(); 
        if(useVal){
            Validation v=(Validation)cmbValidation.getSelectedItem();
            if(v==null){
                valID=null;
            }else{
                valID=v.getID();
            }

        }else{
            valID=null;
        }
        Date from=null;
        Date to=null;
        if(chkCreationDate.isSelected()){
            from=frmMain.getStringAsDate(txtDateFrom.getText());
            to=frmMain.getStringAsDate(txtDateTo.getText());
        }
        
        Species.ParasiteType pt= Species.ParasiteType.Unknown;
        if(cmbParasiteType.getSelectedIndex()==0){
            pt= Species.ParasiteType.Unknown;
        }else if(cmbParasiteType.getSelectedIndex()==1){
            pt= Species.ParasiteType.NoParasite;
        }else if(cmbParasiteType.getSelectedIndex()==2){
            pt= Species.ParasiteType.HostAssociated;
        }else if(cmbParasiteType.getSelectedIndex()==3){
            pt= Species.ParasiteType.Symbiant;
        }else if(cmbParasiteType.getSelectedIndex()==4){
            pt= Species.ParasiteType.Parasite;
        }
        
        m_SpeciesCol.load(txtNameLIKE.getText(), useVal, valID, from, to,pt, chkParasiteType.isSelected(), frmMain.getfrmMain().getDBConnection());
        
        fillTable();
        
    }
    
    private void fillTable(){
        SpeciesTableModel tblModel=new SpeciesTableModel(m_SpeciesCol);
        tblSpecies.setModel(tblModel);
    }
    
     public class SpeciesTableModel extends AbstractTableModel {
        private SpeciesCollection m_MySpeciesCol=null;
        public SpeciesTableModel(SpeciesCollection speciesCol) {
            m_MySpeciesCol=speciesCol;
        }
        @Override public int getRowCount() {
            return m_MySpeciesCol.size();
        }
        @Override public int getColumnCount() {
            return 5;
        }
        @Override public String getColumnName(int column) {
            String name = "";
            switch (column) {
                case 0:
                    name = "TaxID";
                    break;
                case 1:
                    name = "Name";
                    break;
                case 2:
                    name = "References";
                    break;
                case 3:
                    name = "ParasiteType";
                    break;
                case 4:
                    name="Created";
                    break;
            }
            return name;
        }
        @Override public Class<?> getColumnClass(int columnIndex) {
            Class type = String.class;
            switch (columnIndex) {
                case 0:
                    type = Integer.class;
                    break;
                case 1:
                    type = String.class;
                    break;
                case 2:
                    type = String.class;
                    break;
                case 3:
                    type = Species.ParasiteType.class;
                    break;
                case 4:
                    type=String.class;
                    break;
            }
            return type;
        }

        @Override public Object getValueAt(int rowIndex, int columnIndex) {
            Species s=m_MySpeciesCol.getByIndex(rowIndex);
            
            Object value = null;
            switch (columnIndex) {
                case 0:
                    value = s.getTaxID();
                    break;
                case 1:
                    value = s.getName();
                    break;
                case 2:
                    value = s.getReferences();
                    break;
                case 3:
                    value = s.getParasiteType();
                    break;
                case 4:
                    value=frmMain.getDateAsString(s.getCreatedDate());
            }
            return value;
        }            
    }        
    
    
}
