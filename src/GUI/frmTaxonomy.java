/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmTaxonomy.java
 *
 * Created on 10.feb.2014, 00:05:11
 */
package GUI;

import Classes.Host;
import Classes.HostCollection;
import Classes.ResolvedHost;
import Classes.ResolvedHostCollection;
import Classes.Species;
import Classes.SpeciesCollection;
import Classes.Validation;
import classes.TaxNodesWrapper;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.ComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;


/**
 *
 * @author ralfne
 */
public class frmTaxonomy extends javax.swing.JFrame {
    private SpeciesCollection m_AllSpecies=null;
    private int m_DefaultValidationID=-1;
    private ArrayList<DefaultMutableTreeNode> m_HitsNodes=null;
    private HostCollection m_Hosts=null;
    private TaxNodesWrapper m_TaxNodesWrapper=null;
        
    /** Creates new form frmTaxonomy */
    public frmTaxonomy() {
        initComponents();
        initData();
        lblMagenta.setVisible(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        eUtilsTool1 = new Classes.EUtilsTool();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        cmbParasiteType = new javax.swing.JComboBox();
        chkOverrideManualValidation = new javax.swing.JCheckBox();
        cmbChangeStatusSelection = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearchTerm = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        lblMagenta = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        chkParasitesETC = new javax.swing.JCheckBox();
        chkHosts = new javax.swing.JCheckBox();
        chkUnknowns = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        chkFreeLiving = new javax.swing.JCheckBox();
        lblBlue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(java.awt.Color.red);
        jLabel2.setText("Parasites et al.");

        jLabel3.setForeground(new java.awt.Color(0, 204, 51));
        jLabel3.setText("Free living");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel6.setText("Set species to:");

        jButton4.setText("OK");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        cmbParasiteType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Unknown", "Free living", "Host-associated", "Symbiant", "Parasite" }));

        chkOverrideManualValidation.setText("override manual validation");

        cmbChangeStatusSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All selected species", "Children of selected species" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbChangeStatusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbParasiteType, 0, 106, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 105, Short.MAX_VALUE)
                        .addComponent(chkOverrideManualValidation)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(chkOverrideManualValidation))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(cmbParasiteType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbChangeStatusSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Search for a term starting with:");

        jButton2.setText("Search");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        lblMagenta.setForeground(new java.awt.Color(255, 0, 255));
        lblMagenta.setText("Symbiant");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(txtSearchTerm, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblMagenta, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblMagenta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel5.setText("Selected species:");

        jButton3.setText("Display...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addContainerGap(6, Short.MAX_VALUE))
        );

        jLabel7.setFont(jLabel7.getFont().deriveFont((jLabel7.getFont().getStyle() | java.awt.Font.ITALIC) | java.awt.Font.BOLD));
        jLabel7.setText("Changed manually");

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel11.setText("Selected host:");

        jButton6.setText("Display...");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6)
                .addContainerGap(6, Short.MAX_VALUE))
        );

        jLabel10.setText("Display:");

        chkParasitesETC.setSelected(true);
        chkParasitesETC.setText("Parasites et al.");

        chkHosts.setText("Hosts");

        chkUnknowns.setSelected(true);
        chkUnknowns.setText("Unknowns");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        chkFreeLiving.setSelected(true);
        chkFreeLiving.setText("Free-living species");

        lblBlue.setForeground(java.awt.Color.blue);
        lblBlue.setText("Hosts");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkParasitesETC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkFreeLiving)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkHosts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chkUnknowns)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 299, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblBlue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(chkParasitesETC)
                    .addComponent(jLabel7)
                    .addComponent(chkFreeLiving)
                    .addComponent(chkHosts)
                    .addComponent(chkUnknowns)
                    .addComponent(jButton1)
                    .addComponent(lblBlue)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, 0, 67, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, 0, 67, Short.MAX_VALUE)
                    .addComponent(jPanel3, 0, 67, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try{
            findTerm();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
    }//GEN-LAST:event_jTree1ValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try{
            displaySelectedSpecies();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try{
            setSelectedSpeciesToParasites();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try{
            displaySelectedHosts();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try{
            initTaxView();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmTaxonomy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmTaxonomy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmTaxonomy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmTaxonomy.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmTaxonomy().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox chkFreeLiving;
    private javax.swing.JCheckBox chkHosts;
    private javax.swing.JCheckBox chkOverrideManualValidation;
    private javax.swing.JCheckBox chkParasitesETC;
    private javax.swing.JCheckBox chkUnknowns;
    private javax.swing.JComboBox cmbChangeStatusSelection;
    private javax.swing.JComboBox cmbParasiteType;
    private Classes.EUtilsTool eUtilsTool1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    private javax.swing.JLabel lblBlue;
    private javax.swing.JLabel lblMagenta;
    private javax.swing.JTextField txtSearchTerm;
    // End of variables declaration//GEN-END:variables

    private void initTaxView()throws Exception{
        initTaxNodesWrapper();
        try{
            IDNameHolder idName=new IDNameHolder(1, m_TaxNodesWrapper.getName(1));
            fillTree(idName);
            if(chkHosts.isSelected() && chkParasitesETC.isSelected() && 
                chkUnknowns.isSelected() && chkFreeLiving.isSelected()){
                Iterator<DefaultMutableTreeNode> it=m_HitsNodes.iterator();
////                while(it.hasNext()){
////                    TreeNode[] p=it.next().getPath();
////                    jTree1.expandPath(new TreePath(p));
////                }
            }else{
//////                for (int i = 0; i < jTree1.getRowCount(); i++) {
//////                    jTree1.expandRow(i);
//////                }    
            }
            jTree1.repaint();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }
    
    private void initTaxNodesWrapper()throws Exception{
        HashMap<Integer,Integer> taxIDs=new HashMap<Integer, Integer>();
        
        if(chkHosts.isSelected() && chkParasitesETC.isSelected() && 
                chkUnknowns.isSelected() && chkFreeLiving.isSelected()){
            m_TaxNodesWrapper=frmMain.getfrmMain().getTaxNodes();
            return;
        }
        
        if(chkHosts.isSelected()){
            Iterator<Host> iterH=m_Hosts.iterator();
            while(iterH.hasNext()){
                Host h=iterH.next();
                taxIDs.put(h.getTaxID(),h.getTaxID());
            }
        }
        if(chkParasitesETC.isSelected() || chkUnknowns.isSelected() || chkFreeLiving.isSelected()){
            Iterator<Integer> iterS=m_AllSpecies.keySet().iterator();
            while(iterS.hasNext()){
                Integer key=iterS.next();
                Species spe=m_AllSpecies.get(key);
                Integer txid=taxIDs.get(spe.getTaxID());
                if(txid==null){
                    if(spe.getParasiteType()==Species.ParasiteType.NoParasite){
                        if(chkFreeLiving.isSelected()){
                            taxIDs.put(spe.getTaxID(), spe.getTaxID());
                        }
                    }else if(spe.getParasiteType()==Species.ParasiteType.Unknown){
                        if(chkUnknowns.isSelected()){
                            taxIDs.put(spe.getTaxID(), spe.getTaxID());
                        }
                    }else if(isParasiteETC(spe)){
                        if(chkParasitesETC.isSelected()){
                            taxIDs.put(spe.getTaxID(), spe.getTaxID());
                        }   
                    }
                }
            }
        }
        Integer[] tmp=taxIDs.keySet().toArray(new Integer[0]);
        ArrayList<Integer> taxIDsAL=new ArrayList<Integer>();
        for(Integer tx: tmp){taxIDsAL.add(tx);}
        m_TaxNodesWrapper=frmMain.getfrmMain().getTaxNodes().getRepresentedSubset(taxIDsAL);
    }
    
    private boolean isParasiteETC(Species s){
        if(s.getParasiteType()==Species.ParasiteType.HostAssociated || 
                s.getParasiteType()==Species.ParasiteType.Parasite ||
                s.getParasiteType()==Species.ParasiteType.Symbiant){
            return true;
        }else{
            return false;
        }
                
    }
    
//    private void initValidationCombo(){
//        ComboBoxModel m=new ValidationComboBoxModel();
//        cmbValidation.setModel(m);
//        cmbValidation.setSelectedIndex(0);
//    }
    
    private void setSelectedSpeciesToParasites()throws Exception{
        //Validation selectedValidation=null;
        Validation manualValidation=frmMain.getfrmMain().getValidations().getManual();
//        if(cmbValidation.getSelectedIndex()!=-1){
//            selectedValidation=(Validation)cmbValidation.getSelectedItem();
//        }

        Species.ParasiteType toType= Species.ParasiteType.Unknown;
        if(cmbParasiteType.getSelectedIndex()==0){
            toType=Species.ParasiteType.Unknown;
        }else if(cmbParasiteType.getSelectedIndex()==1){
            toType=Species.ParasiteType.NoParasite;
        }else if(cmbParasiteType.getSelectedIndex()==2){
            toType=Species.ParasiteType.HostAssociated;
        }else if(cmbParasiteType.getSelectedIndex()==3){
            toType=Species.ParasiteType.Symbiant;
        }else if(cmbParasiteType.getSelectedIndex()==4){
            toType=Species.ParasiteType.Parasite;
        }
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getSelectionPath().getLastPathComponent();
        if(node.getUserObject()!=null){
            IDNameHolder item=(IDNameHolder)node.getUserObject();
            int taxID=item.getID();
            ArrayList<Integer> taxIDs=null;
            if(cmbChangeStatusSelection.getSelectedIndex()==0){
                taxIDs=new ArrayList<Integer>();
                for(TreePath tp : jTree1.getSelectionPaths()){
                    DefaultMutableTreeNode thisNode=(DefaultMutableTreeNode)tp.getLastPathComponent();        
                    IDNameHolder thisItem=(IDNameHolder)thisNode.getUserObject();
                    if(thisItem!=null){
                        int thisTaxID=thisItem.getID();
                        taxIDs.add(thisTaxID);                        
                    }
                }
            }else{
                if(chkFreeLiving.isSelected() && 
                        chkHosts.isSelected() && 
                        chkParasitesETC.isSelected() && 
                        chkUnknowns.isSelected() ){
                    
                        taxIDs=m_TaxNodesWrapper.getChildrenRecursive(taxID);
                }else{
                        String message="You must display all of 'Parasites et al.', 'Free-living', 'Hosts' and 'Unkowns' in order to modify all children of a selected node";
                        JOptionPane.showMessageDialog(null, message);
                        return;
                }

            }

            SpeciesCollection.setSpeciesToParasiteManually(taxIDs, 
                    toType, manualValidation, chkOverrideManualValidation.isSelected(), frmMain.getfrmMain().getDBConnection());
        }
        jTree1.setModel(null);
        initData();
    }
    
    private ArrayList<Integer> getSelectedTaxIDs(){
        TreePath[] selPaths=jTree1.getSelectionPaths();
        //int[] selRowsIndices=jTree1.getSelectionRows();
        ArrayList<Integer> taxIDs=new ArrayList<Integer>();
        for(TreePath tp :selPaths){
            DefaultMutableTreeNode tn=(DefaultMutableTreeNode)tp.getLastPathComponent();
            if(tn.getUserObject() instanceof IDNameHolder ){
                IDNameHolder item=(IDNameHolder)tn.getUserObject();
                int taxID=item.getID();
                taxIDs.add(taxID);
            }
        }
        return taxIDs;
    }
    
    private void displaySelectedSpecies()throws Exception{
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getSelectionPath().getLastPathComponent();
        if(node.getUserObject()!=null){
            IDNameHolder item=(IDNameHolder)node.getUserObject();
            int taxID=item.getID();
            Species s=new Species();
            s.loadFromTaxID(taxID, frmMain.getfrmMain().getDBConnection());
            if(s.getID()>0){
                frmSpecies frm=new frmSpecies(s);
                frm.setVisible(true);                            
            }
        }
    }
    
    private void displaySelectedHosts()throws Exception{
        ArrayList<Integer> taxIDs=getSelectedTaxIDs();
        ResolvedHostCollection hosts=new ResolvedHostCollection();
        Iterator<Integer> iter=taxIDs.iterator();
        while(iter.hasNext()){
            Integer taxID=iter.next();
            ResolvedHost h=new ResolvedHost();
            
            h.load(taxID, frmMain.getfrmMain().getTaxNodes(), frmMain.getfrmMain().getDBConnection());
            if(h.getTaxID()!=-1){
                hosts.put(taxID, h);
            }
            
        }

        frmHostsForSpecies frm=new frmHostsForSpecies();
        frm.init(hosts);
        frm.setVisible(true);
        
//        
//        DefaultMutableTreeNode node = (DefaultMutableTreeNode)jTree1.getSelectionPath().getLastPathComponent();
//        if(node.getUserObject()!=null){
//            IDNameHolder item=(IDNameHolder)node.getUserObject();
//            int taxID=item.getID();
//            frmHost frm=new frmHost();
//            frm.init(taxID);
//            frm.setVisible(true);
//        }
    }
    
    private void initData(){
        try{
            //initValidationCombo();
            m_HitsNodes=new ArrayList<DefaultMutableTreeNode>();
            m_AllSpecies=new SpeciesCollection();
            m_AllSpecies.load(frmMain.getfrmMain().getDBConnection());
            m_DefaultValidationID=frmMain.getfrmMain().getValidations().getDefault().getID();
            m_Hosts=new HostCollection(null);
            m_Hosts.loadDistinctHostsWithTaxID(frmMain.getfrmMain().getDBConnection());
            //getInvalidHostTaxIDs();
        }catch(Exception ex){
            frmMain.getfrmMain().displayException(ex);
        }
    }
    
    private void findTerm(){
        DefaultMutableTreeNode root=(DefaultMutableTreeNode)jTree1.getModel().getRoot();
        findTaxaInNode(root);
    }
    
    private boolean  findTaxaInNode(DefaultMutableTreeNode node){
        boolean out=false;
        for(int i=0;i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode=(DefaultMutableTreeNode)node.getChildAt(i);
            if(childNode.getUserObject() instanceof IDNameHolder){
                IDNameHolder idName=(IDNameHolder)childNode.getUserObject();
                String searchS=txtSearchTerm.getText();
                String nameS=idName.getName();
                if (nameS.startsWith(searchS)){
                    TreePath tp=new TreePath(childNode.getPath());
                    jTree1.setSelectionPath(tp);  
                    jTree1.scrollPathToVisible(tp);
                    out=true;
                    break;
                }else{
                    out=findTaxaInNode(childNode);
                    if(out){
                        break;
                    }
                }                
            }
        }
        return out;
    }
    
    private void fillTree(IDNameHolder root){
        DefaultMutableTreeNode top=new DefaultMutableTreeNode(root);
        addChildrenNodes(top);
        TreeModel tm=new DefaultTreeModel(top);
        jTree1.setCellRenderer(new jTreeCellRenderer(m_TaxNodesWrapper));
        jTree1.setModel(tm);
    }

    private void addChildrenNodes(DefaultMutableTreeNode parent){
        IDNameHolder idName=(IDNameHolder)parent.getUserObject();
        ////addSpecies(parent);
        ArrayList<Integer> children=m_TaxNodesWrapper.getChildren(idName.getID());
        if(children==null) return;
        Iterator<Integer> it=children.iterator();
        while(it.hasNext()){
            int taxnodeID=it.next();
            String treeNodeText=m_TaxNodesWrapper.getName(taxnodeID);
            treeNodeText+=" (taxid " + String.valueOf(taxnodeID) + ")";
//            Host h=m_Hosts.getByTaxID(taxnodeID);
//            if(h!=null){ treeNodeText+= " (Host)"; }
            IDNameHolder child=new IDNameHolder(taxnodeID, treeNodeText);
            DefaultMutableTreeNode treeNode = new DefaultMutableTreeNode(child);
            parent.add(treeNode);
            addChildrenNodes(treeNode);
        }
    }
    
    private void addSpecies(DefaultMutableTreeNode parent){
        IDNameHolder idName=(IDNameHolder)parent.getUserObject();        
        Species species=null;
        species=m_AllSpecies.get(idName.m_ID);
        if(species!=null){
            IDNameHolder idn=(IDNameHolder)parent.getUserObject();
            idn.setSpecies(species);
            m_HitsNodes.add(parent);
        }
    }
    
    private void getInvalidHostTaxIDs()throws Exception{
        Iterator<Host>iter=m_Hosts.iterator();
        StringBuilder sb=new StringBuilder();
        TaxNodesWrapper tnw=frmMain.getfrmMain().getTaxNodes();
        while(iter.hasNext()){
            Host h=iter.next();
            String tmp=tnw.getName(h.getTaxID());
            if(tmp==null){
                sb.append(String.valueOf(h.getTaxID())).append(", ");
            }
        }
        String s=sb.toString();
    }
    
    private class IDNameHolder {
        private int m_ID=-1;
        private String m_Name="";
        private Species m_Species=null;
        
        public IDNameHolder(int id, String name){
            m_ID=id;
            m_Name=name;
        }
        
        public void setSpecies(Species value){
            m_Species=value;
        }
        
        public Species getSpecies(){
            return m_Species;
        }

        public void setID(int id){
            m_ID=id;
        }

        public int getID(){
            return m_ID;
        }

        public String getName(){
            return m_Name;
        }

        public void setName(String name){
            m_Name=name;
        }

        @Override
        public String toString(){
            return m_Name;
        }
    }
    
    private class jTreeCellRenderer extends DefaultTreeCellRenderer{
        private TaxNodesWrapper m_TaxNodesWrapper=null;
        
        public jTreeCellRenderer(TaxNodesWrapper taxNodesWrapper){
            m_TaxNodesWrapper=taxNodesWrapper;
        }

        @Override public Component getTreeCellRendererComponent(
                  JTree tree,
                  Object value,
                  boolean selected,
                  boolean expanded,
                  boolean leaf,
                  int row,
                  boolean hasFocus) {
            
            Component c = super.getTreeCellRendererComponent(
                          tree, value, selected,
                          expanded, leaf, row,
                          hasFocus);
                        
            c.setForeground(Color.black);
            if(value instanceof DefaultMutableTreeNode){
                DefaultMutableTreeNode treeNode=(DefaultMutableTreeNode)value;
                if(treeNode.getUserObject() instanceof IDNameHolder){
                    IDNameHolder item=(IDNameHolder)treeNode.getUserObject();
                    
                    String text="";
                    jTreeCellRenderer cTCR=(jTreeCellRenderer)c;
                    c.setFont(getFont().deriveFont(Font.PLAIN));
                    c.setForeground(Color.gray);
                    
                    Integer txID=item.getID();
                    text=applyParasiteFormatting(txID, cTCR, text);

                    text=applyHostFormatting(txID, cTCR, text);
                    

                    if(!text.isEmpty()){ text+=")"; }
                    text=cTCR.getText()+text;
                    cTCR.setText(text);

                }
            }
            return c;
        }
        
        private String applyHostFormatting(int taxID, jTreeCellRenderer renderer, String cellText){
            Host host=m_Hosts.getByTaxID(taxID);
            if(host!=null){
                if (renderer.getForeground()==Color.red){
                    //is also parasite...
                    renderer.setForeground(Color.magenta);
                }else if (renderer.getForeground()==Color.green){
                    //is also free living...
                    renderer.setForeground(Color.cyan);
                }else{
                    renderer.setForeground(Color.blue);
                }

                if(cellText.isEmpty()){
                    cellText=" (host";
                }else{
                    cellText+=", host";
                }
            }
            return cellText;
        }
        
        private String applyParasiteFormatting(int taxID, jTreeCellRenderer renderer, String cellText){
            Species species=m_AllSpecies.get(taxID);
                    
            if(species!=null){
                if(species.getParasiteType()==Species.ParasiteType.Unknown){
                    renderer.setForeground(Color.black);
                }else if(species.getParasiteType()==Species.ParasiteType.NoParasite){
                    cellText+= " (" + Species.getParasiteTypeAsString(species.getParasiteType());
                    renderer.setForeground(Color.green);
                }else if(species.getParasiteType()==Species.ParasiteType.HostAssociated){
                    cellText+= " (" + Species.getParasiteTypeAsString(species.getParasiteType());
                    //c.setForeground(Color.blue);
                    renderer.setForeground(Color.red);
                }else if(species.getParasiteType()==Species.ParasiteType.Symbiant){
                    cellText+= " (" + Species.getParasiteTypeAsString(species.getParasiteType());
                    //c.setForeground(Color.magenta);
                    renderer.setForeground(Color.red);
                }else if(species.getParasiteType()==Species.ParasiteType.Parasite){
                    cellText+= " (" + Species.getParasiteTypeAsString(species.getParasiteType());
                    renderer.setForeground(Color.red);
                }

                if(isDefaultValidation(species)==null){
                    renderer.setFont(getFont().deriveFont(Font.PLAIN));
                }else{
                    if(isDefaultValidation(species)==true){
                        renderer.setFont(getFont().deriveFont(Font.PLAIN));
                    }else{
                        renderer.setFont(getFont().deriveFont(Font.ITALIC|Font.BOLD));
                    }
                }
            }
            
            return cellText;
        }
        
        
        private Boolean isDefaultValidation(Species s){
            if(s==null){
                return null;
            }
            if(s.getValidation()==null){
                return null;
            }
            if(s.getValidation().getID()==m_DefaultValidationID){
                return true;
            }else{
                return false;
            }
        }

    }

    
    
    
    
}
