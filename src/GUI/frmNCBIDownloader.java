/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * NCBIDownloader.java
 *
 * Created on 02.feb.2014, 15:59:19
 */
package GUI;


import Classes.TaxIDDownloader;
import Classes.GenBankRecDownloader;
import Classes.GiNumberDownloader;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author ralfne
 */
public class frmNCBIDownloader extends javax.swing.JFrame {
    public final static String NEWLINE=System.getProperty("line.separator");
    public final static String PATH_SEPARATOR=System.getProperty("file.separator");
    
    private Thread m_AsyncThread=null;

    /** Creates new form NCBIDownloader */
    public frmNCBIDownloader() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtInput = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        txtOutput = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();
        cmbMode = new javax.swing.JComboBox();
        btnOK = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        txtProgress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtRetMax = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Select action:");

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Input location:");

        txtInput.setText("C:\\MERG\\Apps\\ParasiteDBParser\\input\\tmp.txt");

        jButton2.setText("Browse...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Output location:");

        jButton3.setText("Browse...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtOutput, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                    .addComponent(txtInput, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jButton3))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane1.setViewportView(txtLog);

        cmbMode.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Get TaxIDs from tax names", "Get Genbank records from TaxIDs", "Get Host names from Genbank record" }));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel2.setText("Log:");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel5.setText("Progress:");

        jLabel6.setText("RetMax:");

        txtRetMax.setText("100");

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbMode, 0, 468, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRetMax, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 232, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOK))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbMode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel)
                    .addComponent(jLabel6)
                    .addComponent(txtRetMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(txtProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String path="";
        if(cmbMode.getSelectedIndex()==0){
            path=getFilenameName("Input location");
        }else if(cmbMode.getSelectedIndex()==1){
            path=getFilenameName("Input location");
        }else{
            path=getDirectoryName("Input location");
        }
        txtInput.setText(path);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String path="";
        if(cmbMode.getSelectedIndex()==0){
            path=getFilenameName("Output location");
        }else if(cmbMode.getSelectedIndex()==1){
            path=getDirectoryName("Output location");
        }else{
            path=getDirectoryName("Ouput location");
        }
        txtOutput.setText(path);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        if(cmbMode.getSelectedIndex()==0){
            AsyncThreadObject_TaxIDs asyncObj=new AsyncThreadObject_TaxIDs();
            m_AsyncThread=new Thread(asyncObj);            
        }else if(cmbMode.getSelectedIndex()==1){
            AsyncThreadObject_GiNumbers asyncObj=new AsyncThreadObject_GiNumbers();
            m_AsyncThread=new Thread(asyncObj);                        
        }else{
            AsyncThreadObject_GenBankRecs asyncObj=new AsyncThreadObject_GenBankRecs();
            m_AsyncThread=new Thread(asyncObj);                        
        }
        m_AsyncThread.start();
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        m_AsyncThread.stop();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmNCBIDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmNCBIDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmNCBIDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmNCBIDownloader.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new frmNCBIDownloader().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cmbMode;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtInput;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JTextField txtOutput;
    private javax.swing.JTextField txtProgress;
    private javax.swing.JTextField txtRetMax;
    // End of variables declaration//GEN-END:variables

    private void printError(String taxname, Exception ex){
        txtLog.append(NEWLINE);
        txtLog.append("Error when getting taxid for " + taxname + ":");
        txtLog.append(NEWLINE);
        txtLog.append(ex.toString());
        txtLog.append(NEWLINE);
    }        
    private void printError(String taxname, String message){
        txtLog.append(NEWLINE);
        txtLog.append("Error when getting taxid for " + taxname + ":");
        txtLog.append(NEWLINE);
        txtLog.append(message);
        txtLog.append(NEWLINE);
    }
    
    private ArrayList<String> getInputFileContent(String file) throws Exception{
        ArrayList<String> content=new ArrayList<String>();
        BufferedReader br=new BufferedReader(new FileReader(file));
        String line="";
        while((line=br.readLine())!=null){
            line=line.trim();
            if(!line.isEmpty())content.add(line);
        }
        return content;
    }

    private ArrayList<String> getInputFiles(String path){
        ArrayList<String> files=new ArrayList<String>();
        File f=new File(path);
        for(File thisF : f.listFiles()){
            files.add(thisF.getAbsolutePath());
        }
        return files;        
    }
    
    private void saveFile(ArrayList<String> content, String filename)throws Exception{
        BufferedWriter bw=new BufferedWriter(new FileWriter(filename));
        Iterator<String> iter=content.iterator();
        while(iter.hasNext()){
            String line=iter.next();
            bw.write(line);
            bw.newLine();
        }
        bw.flush();
        bw.close();
    }

    public String getDirectoryName(String title){
        JFileChooser fc=new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle(title);
        int res=fc.showOpenDialog(null);
        String fName="";
        if(res==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            fName=f.getPath();
        }
        return fName;
    }

    public String getFilenameName(String title){
        JFileChooser fc=new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle(title);
        int res=fc.showOpenDialog(null);
        String fName="";
        if(res==JFileChooser.APPROVE_OPTION){
            File f=fc.getSelectedFile();
            fName=f.getPath();
        }
        return fName;
    }
    
    public class AsyncThreadObject_TaxIDs implements Runnable{
        public void run(){
            TaxIDDownloader tx=new TaxIDDownloader();
            try{
                int counter=0;
                ArrayList<String> content=getInputFileContent(txtInput.getText());
                ArrayList<String> out=new ArrayList<String>();
                Iterator<String> iter=content.iterator();
                String max=String.valueOf(content.size());
                while(iter.hasNext()){
                    counter++;
                    String line=iter.next();
                    try{
                        tx.appendTaxID(line, out);
                    }catch(Exception ex){
                        printError(line, ex);
                    }
                    txtProgress.setText(String.valueOf(counter) + " of " + max);
                }                
                txtProgress.setText("Saving...");
                saveFile(out, txtOutput.getText());
                txtProgress.setText("Done!");
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }
    
    
    
    public class AsyncThreadObject_GiNumbers implements Runnable{
        int m_RetMax=100;
        
        public void run(){
            int counter=0;
            try{
                int retmax=Integer.parseInt(txtRetMax.getText());
                ArrayList<String> taxIDs=getInputFileContent(txtInput.getText());
                String max=String.valueOf(taxIDs.size());
                Iterator<String> iter=taxIDs.iterator();
                while(iter.hasNext()){
                    counter++;
                    String line=iter.next();
                    int i=line.indexOf("\t");
                    String taxIDS=line.substring(0,i);
                    int taxID=Integer.parseInt(taxIDS);
                    txtProgress.setText("Downloading for taxID " + taxIDS + ";" + String.valueOf(counter) + " of " + max);
                    try{
                        getGiNumbersForTaxID(taxID, retmax);
                    }catch(Exception ex){
                        printError(line, ex);
                    }
                }
                txtProgress.setText("Done!");
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        
        private void getGiNumbersForTaxID(int taxID, int retmax)throws Exception{
            GiNumberDownloader genbankD=new GiNumberDownloader();
            ArrayList<String> giNumbers=genbankD.getGiNumbers(taxID, retmax);
            String filename=txtOutput.getText();
            filename+=frmNCBIDownloader.PATH_SEPARATOR + taxID + ".txt";
            saveFile(giNumbers, filename);
        }
    }
    
    public class AsyncThreadObject_GenBankRecs implements Runnable{
        int m_RetMax=100;
        public void run(){
            int counter=0;
            try{
                ArrayList<String> files=getInputFiles(txtInput.getText());
                Iterator<String> iter=files.iterator();
                String max=String.valueOf(files.size());
                while(iter.hasNext()){
                    counter++;
                    String filepath=iter.next();
                    File f=new File(filepath);
                    String filename=f.getName();
                    int i=filename.indexOf(".txt");
                    String taxid=filename.substring(0,i);
                    String outFile=txtOutput.getText() + frmNCBIDownloader.PATH_SEPARATOR + filename;
                    File outF=new File(outFile);
                    if(outF.exists()){
                        txtProgress.setText("Hosts already calculated for " + taxid);
                    }else{
                        ArrayList<String> giNumbers=getInputFileContent(filepath);
                        HashMap<String,HostRecord> hosts=getHosts(taxid, giNumbers);
                        if(hosts.isEmpty()){
                            txtLog.append("No hosts found for " + taxid);
                            txtLog.append(frmNCBIDownloader.NEWLINE);
                        }else{
                            txtProgress.setText("Saving hosts for " + taxid + "; " + String.valueOf(counter) + " of " + max);
                            saveHostRecords(hosts, outFile);
                        }                        
                    }
                }
                txtProgress.setText("Done!");
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }
        }
        
        private HashMap<String, HostRecord> getHosts(String taxID, ArrayList<String> giNumbers){
            HashMap<String, HostRecord> hosts=new HashMap<String, HostRecord>();
            GenBankRecDownloader genbankD=new GenBankRecDownloader();
            Iterator<String> iter=giNumbers.iterator();
            while(iter.hasNext()){
                String giNumber=iter.next();
                try{
                    String host=genbankD.getHost(giNumber);
                    if(!host.isEmpty()){
                        HostRecord hostR=hosts.get(host);
                        if(hostR==null){
                            hostR=new HostRecord();
                            hostR.Name=host;
                            hostR.GiNumbers.add(giNumber);
                            hosts.put(host, hostR);
                        }else{
                            hostR.GiNumbers.add(giNumber);
                        }                        
                    }
                }catch(Exception ex){
                    String message=ex.getMessage()+ ";gi: " + giNumber;
                    printError(taxID, message);
                }
            }
            return hosts;
        }
        
    }
    
    private void saveHostRecords(HashMap<String, HostRecord> hosts, String filename)throws Exception{
        BufferedWriter bw=new BufferedWriter(new FileWriter(filename));
        Iterator<String> iter=hosts.keySet().iterator();
        while(iter.hasNext()){
            String key=iter.next();
            HostRecord r=hosts.get(key);
            bw.write(r.toString());
            bw.newLine();
        }
        bw.flush();
        bw.close();
    }
    
    private class HostRecord {
        public String Name="";
        public ArrayList<String> GiNumbers=new ArrayList<String>();
        public String toString(){
            String out=Name;
            out+="\t(";
            for(int i=0;i<GiNumbers.size();i++){
                if(i!=0){
                    out+=", ";
                }
                out+=GiNumbers.get(i);
            }
            out+=")";
            return out;
        }
    }
    
}
